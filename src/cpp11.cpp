// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// adf_file_info.cpp
std::string adf_upper(std::string x, bool intl);
extern "C" SEXP _adfExplorer_adf_upper(SEXP x, SEXP intl) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_upper(cpp11::as_cpp<cpp11::decay_t<std::string>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(intl)));
  END_CPP11
}
// adf_file_info.cpp
list adf_path_to_entry(SEXP extptr, std::string filename, int mode);
extern "C" SEXP _adfExplorer_adf_path_to_entry(SEXP extptr, SEXP filename, SEXP mode) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_path_to_entry(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(filename), cpp11::as_cpp<cpp11::decay_t<int>>(mode)));
  END_CPP11
}
// adf_file_info.cpp
bool adf_file_exists_(SEXP extptr, std::string path);
extern "C" SEXP _adfExplorer_adf_file_exists_(SEXP extptr, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_file_exists_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// adf_file_info.cpp
bool adf_dir_exists_(SEXP extptr, std::string path);
extern "C" SEXP _adfExplorer_adf_dir_exists_(SEXP extptr, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dir_exists_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// adf_file_info.cpp
list adf_entry_info_(SEXP extptr, std::string path);
extern "C" SEXP _adfExplorer_adf_entry_info_(SEXP extptr, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_entry_info_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// adf_file_info.cpp
list adf_con_summary(SEXP extptr);
extern "C" SEXP _adfExplorer_adf_con_summary(SEXP extptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_con_summary(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr)));
  END_CPP11
}
// adf_file_operators.cpp
raws adf_file_read_ext(SEXP extptr, int req_size);
extern "C" SEXP _adfExplorer_adf_file_read_ext(SEXP extptr, SEXP req_size) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_file_read_ext(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(req_size)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_change_dir(SEXP extptr, std::string path);
extern "C" SEXP _adfExplorer_adf_change_dir(SEXP extptr, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_change_dir(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_get_current_dir(SEXP extptr);
extern "C" SEXP _adfExplorer_adf_get_current_dir(SEXP extptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_get_current_dir(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr)));
  END_CPP11
}
// adf_file_operators.cpp
list list_adf_entries_(SEXP extptr, std::string filename, bool recursive, bool nested);
extern "C" SEXP _adfExplorer_list_adf_entries_(SEXP extptr, SEXP filename, SEXP recursive, SEXP nested) {
  BEGIN_CPP11
    return cpp11::as_sexp(list_adf_entries_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(filename), cpp11::as_cpp<cpp11::decay_t<bool>>(recursive), cpp11::as_cpp<cpp11::decay_t<bool>>(nested)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_mkdir(SEXP extptr, std::string path);
extern "C" SEXP _adfExplorer_adf_mkdir(SEXP extptr, SEXP path) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_mkdir(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_remove_entry(SEXP extptr, std::string path, bool flush);
extern "C" SEXP _adfExplorer_adf_remove_entry(SEXP extptr, SEXP path, SEXP flush) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_remove_entry(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path), cpp11::as_cpp<cpp11::decay_t<bool>>(flush)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_set_entry_name_(SEXP extptr, std::string path, std::string replacement);
extern "C" SEXP _adfExplorer_adf_set_entry_name_(SEXP extptr, SEXP path, SEXP replacement) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_set_entry_name_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(path), cpp11::as_cpp<cpp11::decay_t<std::string>>(replacement)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP move_adf_internal(SEXP extptr, std::string source, std::string destination);
extern "C" SEXP _adfExplorer_move_adf_internal(SEXP extptr, SEXP source, SEXP destination) {
  BEGIN_CPP11
    return cpp11::as_sexp(move_adf_internal(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(source), cpp11::as_cpp<cpp11::decay_t<std::string>>(destination)));
  END_CPP11
}
// adf_file_operators.cpp
int adf_readbin_size(int what, int sz);
extern "C" SEXP _adfExplorer_adf_readbin_size(SEXP what, SEXP sz) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_readbin_size(cpp11::as_cpp<cpp11::decay_t<int>>(what), cpp11::as_cpp<cpp11::decay_t<int>>(sz)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_readlines(SEXP extptr, int n_, bool ok, bool warn, std::string encoding, bool skipNul);
extern "C" SEXP _adfExplorer_adf_readlines(SEXP extptr, SEXP n_, SEXP ok, SEXP warn, SEXP encoding, SEXP skipNul) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_readlines(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(n_), cpp11::as_cpp<cpp11::decay_t<bool>>(ok), cpp11::as_cpp<cpp11::decay_t<bool>>(warn), cpp11::as_cpp<cpp11::decay_t<std::string>>(encoding), cpp11::as_cpp<cpp11::decay_t<bool>>(skipNul)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_writebin(SEXP object, SEXP extptr, int size, bool swap, bool useBytes);
extern "C" SEXP _adfExplorer_adf_writebin(SEXP object, SEXP extptr, SEXP size, SEXP swap, SEXP useBytes) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_writebin(cpp11::as_cpp<cpp11::decay_t<SEXP>>(object), cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(size), cpp11::as_cpp<cpp11::decay_t<bool>>(swap), cpp11::as_cpp<cpp11::decay_t<bool>>(useBytes)));
  END_CPP11
}
// adf_file_operators.cpp
SEXP adf_writelines(strings text, SEXP extptr, std::string sep, bool useBytes);
extern "C" SEXP _adfExplorer_adf_writelines(SEXP text, SEXP extptr, SEXP sep, SEXP useBytes) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_writelines(cpp11::as_cpp<cpp11::decay_t<strings>>(text), cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(sep), cpp11::as_cpp<cpp11::decay_t<bool>>(useBytes)));
  END_CPP11
}
// block_adf.cpp
SEXP read_adf_block_(SEXP extptr, int sector);
extern "C" SEXP _adfExplorer_read_adf_block_(SEXP extptr, SEXP sector) {
  BEGIN_CPP11
    return cpp11::as_sexp(read_adf_block_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(sector)));
  END_CPP11
}
// block_adf.cpp
SEXP write_adf_block_(SEXP extptr, int sector, raws block);
extern "C" SEXP _adfExplorer_write_adf_block_(SEXP extptr, SEXP sector, SEXP block) {
  BEGIN_CPP11
    return cpp11::as_sexp(write_adf_block_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(sector), cpp11::as_cpp<cpp11::decay_t<raws>>(block)));
  END_CPP11
}
// block_adf.cpp
list interpret_file_header(SEXP extptr, int vol_num, int sectnum);
extern "C" SEXP _adfExplorer_interpret_file_header(SEXP extptr, SEXP vol_num, SEXP sectnum) {
  BEGIN_CPP11
    return cpp11::as_sexp(interpret_file_header(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num), cpp11::as_cpp<cpp11::decay_t<int>>(sectnum)));
  END_CPP11
}
// block_adf.cpp
list interpret_dir_header(SEXP extptr, int vol_num, int sectnum);
extern "C" SEXP _adfExplorer_interpret_dir_header(SEXP extptr, SEXP vol_num, SEXP sectnum) {
  BEGIN_CPP11
    return cpp11::as_sexp(interpret_dir_header(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num), cpp11::as_cpp<cpp11::decay_t<int>>(sectnum)));
  END_CPP11
}
// block_adf.cpp
list interpret_root_header(SEXP extptr, int vol_num);
extern "C" SEXP _adfExplorer_interpret_root_header(SEXP extptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(interpret_root_header(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_format.cpp
SEXP adf_dev_format(SEXP extptr, std::string name, bool ffs, bool intl, bool dircache, bool bootable);
extern "C" SEXP _adfExplorer_adf_dev_format(SEXP extptr, SEXP name, SEXP ffs, SEXP intl, SEXP dircache, SEXP bootable) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dev_format(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<bool>>(ffs), cpp11::as_cpp<cpp11::decay_t<bool>>(intl), cpp11::as_cpp<cpp11::decay_t<bool>>(dircache), cpp11::as_cpp<cpp11::decay_t<bool>>(bootable)));
  END_CPP11
}
// dev_info.cpp
std::string adf_dev_name(SEXP extptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_dev_name(SEXP extptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dev_name(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
int adf_dev_size(SEXP extptr);
extern "C" SEXP _adfExplorer_adf_dev_size(SEXP extptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dev_size(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr)));
  END_CPP11
}
// dev_info.cpp
int adf_dev_nvol(SEXP exptr);
extern "C" SEXP _adfExplorer_adf_dev_nvol(SEXP exptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dev_nvol(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr)));
  END_CPP11
}
// dev_info.cpp
std::string adf_dev_type(SEXP exptr);
extern "C" SEXP _adfExplorer_adf_dev_type(SEXP exptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_dev_type(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr)));
  END_CPP11
}
// dev_info.cpp
int adf_free_blocks(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_free_blocks(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_free_blocks(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
int adf_block_size(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_block_size(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_block_size(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
int adf_vol_size(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_vol_size(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_vol_size(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
bool adf_is_intl(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_is_intl(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_is_intl(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
bool adf_is_dircache(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_is_dircache(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_is_dircache(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
bool adf_is_ffs(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_is_ffs(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_is_ffs(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
bool adf_is_write_protected(SEXP exptr);
extern "C" SEXP _adfExplorer_adf_is_write_protected(SEXP exptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_is_write_protected(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr)));
  END_CPP11
}
// dev_info.cpp
bool adf_is_bootable(SEXP exptr, int vol_num);
extern "C" SEXP _adfExplorer_adf_is_bootable(SEXP exptr, SEXP vol_num) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_is_bootable(cpp11::as_cpp<cpp11::decay_t<SEXP>>(exptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num)));
  END_CPP11
}
// dev_info.cpp
bool adf_set_dev_name(SEXP extptr, int vol_num, std::string new_name);
extern "C" SEXP _adfExplorer_adf_set_dev_name(SEXP extptr, SEXP vol_num, SEXP new_name) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_set_dev_name(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<int>>(vol_num), cpp11::as_cpp<cpp11::decay_t<std::string>>(new_name)));
  END_CPP11
}
// open_adf.cpp
SEXP open_adf_(std::string filename, bool write_protected);
extern "C" SEXP _adfExplorer_open_adf_(SEXP filename, SEXP write_protected) {
  BEGIN_CPP11
    return cpp11::as_sexp(open_adf_(cpp11::as_cpp<cpp11::decay_t<std::string>>(filename), cpp11::as_cpp<cpp11::decay_t<bool>>(write_protected)));
  END_CPP11
}
// open_adf.cpp
void close_all_devices_();
extern "C" SEXP _adfExplorer_close_all_devices_() {
  BEGIN_CPP11
    close_all_devices_();
    return R_NilValue;
  END_CPP11
}
// open_adf_file.cpp
void adf_close_file_con(SEXP extptr);
extern "C" SEXP _adfExplorer_adf_close_file_con(SEXP extptr) {
  BEGIN_CPP11
    adf_close_file_con(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr));
    return R_NilValue;
  END_CPP11
}
// open_adf_file.cpp
double seek_adf(SEXP extptr, double where, int origin);
extern "C" SEXP _adfExplorer_seek_adf(SEXP extptr, SEXP where, SEXP origin) {
  BEGIN_CPP11
    return cpp11::as_sexp(seek_adf(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<double>>(where), cpp11::as_cpp<cpp11::decay_t<int>>(origin)));
  END_CPP11
}
// open_adf_file.cpp
SEXP adf_file_con_(SEXP extptr, std::string filename, bool writable);
extern "C" SEXP _adfExplorer_adf_file_con_(SEXP extptr, SEXP filename, SEXP writable) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_file_con_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(filename), cpp11::as_cpp<cpp11::decay_t<bool>>(writable)));
  END_CPP11
}
// open_adf_file.cpp
std::string adf_file_con_info(SEXP extptr);
extern "C" SEXP _adfExplorer_adf_file_con_info(SEXP extptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(adf_file_con_info(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr)));
  END_CPP11
}
// open_adf_file.cpp
void close_adf(SEXP extptr);
extern "C" SEXP _adfExplorer_close_adf(SEXP extptr) {
  BEGIN_CPP11
    close_adf(cpp11::as_cpp<cpp11::decay_t<SEXP>>(extptr));
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_adfExplorer_adf_block_size",         (DL_FUNC) &_adfExplorer_adf_block_size,         2},
    {"_adfExplorer_adf_change_dir",         (DL_FUNC) &_adfExplorer_adf_change_dir,         2},
    {"_adfExplorer_adf_close_file_con",     (DL_FUNC) &_adfExplorer_adf_close_file_con,     1},
    {"_adfExplorer_adf_con_summary",        (DL_FUNC) &_adfExplorer_adf_con_summary,        1},
    {"_adfExplorer_adf_dev_format",         (DL_FUNC) &_adfExplorer_adf_dev_format,         6},
    {"_adfExplorer_adf_dev_name",           (DL_FUNC) &_adfExplorer_adf_dev_name,           2},
    {"_adfExplorer_adf_dev_nvol",           (DL_FUNC) &_adfExplorer_adf_dev_nvol,           1},
    {"_adfExplorer_adf_dev_size",           (DL_FUNC) &_adfExplorer_adf_dev_size,           1},
    {"_adfExplorer_adf_dev_type",           (DL_FUNC) &_adfExplorer_adf_dev_type,           1},
    {"_adfExplorer_adf_dir_exists_",        (DL_FUNC) &_adfExplorer_adf_dir_exists_,        2},
    {"_adfExplorer_adf_entry_info_",        (DL_FUNC) &_adfExplorer_adf_entry_info_,        2},
    {"_adfExplorer_adf_file_con_",          (DL_FUNC) &_adfExplorer_adf_file_con_,          3},
    {"_adfExplorer_adf_file_con_info",      (DL_FUNC) &_adfExplorer_adf_file_con_info,      1},
    {"_adfExplorer_adf_file_exists_",       (DL_FUNC) &_adfExplorer_adf_file_exists_,       2},
    {"_adfExplorer_adf_file_read_ext",      (DL_FUNC) &_adfExplorer_adf_file_read_ext,      2},
    {"_adfExplorer_adf_free_blocks",        (DL_FUNC) &_adfExplorer_adf_free_blocks,        2},
    {"_adfExplorer_adf_get_current_dir",    (DL_FUNC) &_adfExplorer_adf_get_current_dir,    1},
    {"_adfExplorer_adf_is_bootable",        (DL_FUNC) &_adfExplorer_adf_is_bootable,        2},
    {"_adfExplorer_adf_is_dircache",        (DL_FUNC) &_adfExplorer_adf_is_dircache,        2},
    {"_adfExplorer_adf_is_ffs",             (DL_FUNC) &_adfExplorer_adf_is_ffs,             2},
    {"_adfExplorer_adf_is_intl",            (DL_FUNC) &_adfExplorer_adf_is_intl,            2},
    {"_adfExplorer_adf_is_write_protected", (DL_FUNC) &_adfExplorer_adf_is_write_protected, 1},
    {"_adfExplorer_adf_mkdir",              (DL_FUNC) &_adfExplorer_adf_mkdir,              2},
    {"_adfExplorer_adf_path_to_entry",      (DL_FUNC) &_adfExplorer_adf_path_to_entry,      3},
    {"_adfExplorer_adf_readbin_size",       (DL_FUNC) &_adfExplorer_adf_readbin_size,       2},
    {"_adfExplorer_adf_readlines",          (DL_FUNC) &_adfExplorer_adf_readlines,          6},
    {"_adfExplorer_adf_remove_entry",       (DL_FUNC) &_adfExplorer_adf_remove_entry,       3},
    {"_adfExplorer_adf_set_dev_name",       (DL_FUNC) &_adfExplorer_adf_set_dev_name,       3},
    {"_adfExplorer_adf_set_entry_name_",    (DL_FUNC) &_adfExplorer_adf_set_entry_name_,    3},
    {"_adfExplorer_adf_upper",              (DL_FUNC) &_adfExplorer_adf_upper,              2},
    {"_adfExplorer_adf_vol_size",           (DL_FUNC) &_adfExplorer_adf_vol_size,           2},
    {"_adfExplorer_adf_writebin",           (DL_FUNC) &_adfExplorer_adf_writebin,           5},
    {"_adfExplorer_adf_writelines",         (DL_FUNC) &_adfExplorer_adf_writelines,         4},
    {"_adfExplorer_close_adf",              (DL_FUNC) &_adfExplorer_close_adf,              1},
    {"_adfExplorer_close_all_devices_",     (DL_FUNC) &_adfExplorer_close_all_devices_,     0},
    {"_adfExplorer_interpret_dir_header",   (DL_FUNC) &_adfExplorer_interpret_dir_header,   3},
    {"_adfExplorer_interpret_file_header",  (DL_FUNC) &_adfExplorer_interpret_file_header,  3},
    {"_adfExplorer_interpret_root_header",  (DL_FUNC) &_adfExplorer_interpret_root_header,  2},
    {"_adfExplorer_list_adf_entries_",      (DL_FUNC) &_adfExplorer_list_adf_entries_,      4},
    {"_adfExplorer_move_adf_internal",      (DL_FUNC) &_adfExplorer_move_adf_internal,      3},
    {"_adfExplorer_open_adf_",              (DL_FUNC) &_adfExplorer_open_adf_,              2},
    {"_adfExplorer_read_adf_block_",        (DL_FUNC) &_adfExplorer_read_adf_block_,        2},
    {"_adfExplorer_seek_adf",               (DL_FUNC) &_adfExplorer_seek_adf,               3},
    {"_adfExplorer_write_adf_block_",       (DL_FUNC) &_adfExplorer_write_adf_block_,       3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_adfExplorer(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
