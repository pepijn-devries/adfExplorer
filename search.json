[{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"amiga-disk-files---introduction","dir":"Articles","previous_headings":"","what":"Amiga Disk Files - Introduction","title":"Amiga Disk File Explorer","text":"Commodore Amiga home computer relied heavily ’s build-3.5 inch floppy disk drive late eighties early nineties. Amiga popular system nowadays can accurately emulated modern machines. problem emulation Amiga modern machines longer floppy disk drives. , usually physically able read Amiga formatted disks. overcome problem, Amiga Disk File (ADF) created. files virtual representation floppy disks can used emulation.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"legal-issues","dir":"Articles","previous_headings":"Amiga Disk Files - Introduction","what":"Legal issues","title":"Amiga Disk File Explorer","text":"Emulating Commodore Amiga hardware , far can tell, legal. However, Amiga operating system stored read memory chip. commonly referred kickstart. kickstart software still protected copyright law. Licensed copies can bought legally AmigaForever. true much Amiga software, still protected copyright. Note analysing ADF files adfExplorer package don’t need kickstart software. Just make sure ADF files use contain data software (don’t need) licence.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"the-adfexplorer-package","dir":"Articles","previous_headings":"","what":"The adfExplorer package","title":"Amiga Disk File Explorer","text":"package allow analyse Amiga Disk Files (ADF) R scripting language. can also used transfer files ADF batches, e.g. preparing disks emulation purposes. focus older Amiga operating systems (.e., OS 3.x less), familiar systems. newer versions floppy disks became less important anyway. Note package read extended ADF files containing information disk’s Modified Frequency Modulation (MFM). information typically required copy protected disk’s therefore scope package.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"future-developments","dir":"Articles","previous_headings":"The adfExplorer package","what":"Future developments","title":"Amiga Disk File Explorer","text":"developmental status package, please consult README page.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"technical-background","dir":"Articles","previous_headings":"","what":"Technical background","title":"Amiga Disk File Explorer","text":"technical details presented , help better understand package functionalities. discuss ADF format depth. detailed description can found FAQ Laurent Clévy. fact, used document main source information development package; accurate description ADF format. physical Amiga floppy disk divided 80 cylinders, 2 tracks sides, contain 11 (double density (DD) disk) 22 (high density (HD) disk) sectors blocks. total disk composed either 1,760 3,520 blocks. block holds 512 bytes information. Amiga Disk File (ADF) dump ordered blocks file. adfExplorer package represents ADF files amigaDisk objects. completely blank disk can created using object constructor (new). blocks Amiga disks represented amigaBlock objects, can created constructor, can extracted amigaDisk object. relationship physical location disk block identifier can obtained get.blockID method. Note identifiers base index zero opposed one used R. physical location can also calculated block identifier get.diskLocation method. completely blank.disk created earlier constructor can hold kind data. However, order hold files, disk needs formatted specific file system. way, Amiga Disk Operating System (DOS) can access . can use blank.amigaDOSDisk method create blank disk, structured can hold files. can see, although blank, completely empty. file system also consumes disk space. understand need know bit Amiga’s file system way information stored blocks disk. discussed extent.","code":"library(adfExplorer) blank.disk <- new(\"amigaDisk\") ## Create with constructor: blank.block <- new(\"amigaBlock\")  ## Extract the first block from an amigaDisk object: blank.block <- amigaBlock(blank.disk, block = 0) get.blockID(disktype = \"DD\", sector = 4, side = 0, cylinder = 35) ## [1] 774 get.diskLocation(disktype = \"DD\", block = 1231) ## $sector ## [1] 10 ##  ## $side ## [1] 1 ##  ## $cylinder ## [1] 55 blank.disk <- blank.amigaDOSDisk(diskname = \"empty\") print(blank.disk) ##  ## Amiga (DD) Disk File: ##  Type:           bootable DOS ##  Volume name:        empty ##  percentage full:    0.2% ##  Fast File System:   FALSE ##  International mode: FALSE ##  Direct cache mode:  FALSE"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"filesystem","dir":"Articles","previous_headings":"Technical background","what":"File systems on the Amiga","title":"Amiga Disk File Explorer","text":"Amiga OS version 2.0, -called Fast File System (FFS) introduced. previous file system named time, now commonly referred Old File System (OFS). OFS sacrifices disk space validation purposes, making robust case data recovery disk got damaged. advantage dropped FFS making slightly faster (original machines) gaining disk space file data. FFS backward compatability. disks formatted file systems read Amiga OS versions <2.0. OS version 2.0 ‘international mode’ also introduced. mode meant correct mistake routine convert text upper case. Amiga file names can lower upper case characters. file name matching, case ignored. purpose, file names shifted upper case file name matching routines. Amiga uses ISO 8859 Latin-1 character set, older operating systems (<2.0), international characters (e.g., ‘ø’) capitalised. mistake corrected OS 2.0, optional. combination ‘directory cache mode’ (see ), international mode mandatory. Amiga OS 3.0, ‘directory cache mode’ introduced. direct cache mode, one blocks stored directory (including root) basic information files stored directory. older versions, directory header stored pointers files directory. meant older OS versions header file needed loaded list files directory. directory cache mode information stored one (necessary) block, faster listing directory content. original machine , floppy disk drives pretty slow. Information stored separate blocks, block composed 512 bytes. even file 10 bytes long, still consume least 512 bytes disk space. several different types blocks, carnying different types information. discussed . Instead working blank disk, can informative work disk data . let’s work example amigaDisk object provided package.","code":"data(\"adf.example\")"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"bootblock","dir":"Articles","previous_headings":"Technical background","what":"The bootblock","title":"Amiga Disk File Explorer","text":"bootblock actually first two blocks Amiga disk: amigaBlock(adf.example, 0) amigaBlock(adf.example, 1). Commodore Amiga system boots, first load blocks memory uses check type disk . executable code block run bootblock checksum valid. system already booted disk inserted, bootblock just used determine type disk represents.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"the-root-block","dir":"Articles","previous_headings":"Technical background","what":"The root block","title":"Amiga Disk File Explorer","text":"root block holds information files directories root disk. also holds information disk name, creation modification date. usually situated centre blocks, block 880 DD disks.","code":"amigaBlock(adf.example, 880)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"the-bitmap-block","dir":"Articles","previous_headings":"Technical background","what":"The bitmap block","title":"Amiga Disk File Explorer","text":"bitmap block, contains information blocks disk use free. first four bytes block form checksum, following 220 bytes (DD disk, twice many HD disk). byte composed 8 bits. bit set, represents used block, set, reflects free block. bitmap block usually situated next root block, block 881 DD disk. bitmap thus used allocate free blocks disk put new files. files removed (blocks) thus freed, also marked bitmap. bitmap also used calculate free space disk.","code":"amigaBlock(adf.example, 881)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"headerblock","dir":"Articles","previous_headings":"Technical background","what":"Header blocks","title":"Amiga Disk File Explorer","text":"indicated , files stored 512 blocks. file data written disk. Information file (.e., file name, ’s size, find data disk etc.) also needs stored. block, containing information file (directory) called header block. file, directory link disk starts header block. root block special case header block; marks root directory. Header blocks directories contain pointers files (directories) directory. Header blocks files contain pointers data blocks, containing data file.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"data-blocks","dir":"Articles","previous_headings":"Technical background","what":"Data blocks","title":"Amiga Disk File Explorer","text":"Fast File System, data blocks composed file data; nothing else. location data blocks provided file’s header. Old File System, data block contains additional information, importantly: pointer next data block checksum.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"dircacheblock","dir":"Articles","previous_headings":"Technical background","what":"The directory cache block","title":"Amiga Disk File Explorer","text":"directory cache block block listing important information files directories within specific directory. block type introduced direct cache mode Amiga OS 3.0. basically stores summary header block information files specific directory central place, making directory listing faster. backward compatibility directory cache mode, meaning OS versions <3.0 able read disks formatted mode. directory cache mode always used combination ‘international mode’.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/amigaDiskFiles.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Amiga Disk File Explorer","text":"package contains example amigaDisk object, formatted old file system bootable bootblock. Files directories root directory can easily listed. disk also contains file called ‘Startup-Sequence’. executable script file run disk booted disk. comparable (probably better known) ‘autoexec.bat’ files IBM PC DOS systems. Let’s little peek file. can see startup sequence contains mostly comments print (Echo) text command line interface doesn’t . currently little support Amiga file types R. exception ProTracker module format, shown following example.  examples show information can retrieved virtual Amiga disk. also possible put data onto disk. Let’s start creating temporary directory: can also put files local system newly created directory. Let’s try put ‘DESCRIPTION’ file adfExplorer package virtual disk: also possible write raw data virtual disk similar way: Look files just put onto disk can even get detailed information files : Wait, executable files? , , just labelled default Amiga OS. can explicitly set files non-executable: regret putting file virtual disk? Just delete :","code":"list.adf.files(adf.example) ## [1] \"Devs\" \"S\"    \"this\" \"mods\" ## get the file from the amigaDisk object: startup <- get.adf.file(adf.example, \"df0:s/Startup-Sequence\")  ## the file content is returned as raw data. ## let's convert it to text: startup <- startup |> rawToChar() |> iconv(from = \"ISO-8859-1\", to = \"UTF-8\")  ## let's show it #cat(startup) ## first get the file as raw data. mod.raw <- get.adf.file(adf.example, \"df0:mods/mod.intro\")  ## For the rest of the example we need ## the ProTrackR package if (requireNamespace(\"ProTrackR\", quietly = TRUE)) {   con <- rawConnection(mod.raw, \"rb\")    ## and read it as a ProTracker module   mod <- ProTrackR::read.module(con)   close(con)    ## plot the first sample from the module:   par(mar = c(5, 4, 0, 0) + 0.1)   plot(ProTrackR::waveform(ProTrackR::PTSample(mod, 1)),        type = \"l\", ylab = \"Amplitude\")      ## and to play it, uncomment the following line:   ## ProTrackR::playMod(mod) } adf.example <- dir.create.adf(adf.example, \"temp\") adf.example <- put.adf.file(adf.example,                             system.file(\"DESCRIPTION\", package = \"adfExplorer\"),                             \"DF0:temp\") adf.example <- put.adf.file(adf.example,                             charToRaw(\"This is just some text to create some content\"),                             \"DF0:temp/example.txt\") list.adf.files(adf.example, \"DF0:temp/\") ## [1] \"example.txt\" \"DESCRIPTION\" adf.file.info(adf.example, paste0(\"DF0:temp/\", list.adf.files(adf.example, \"DF0:temp/\"))) ##             size isdir                     mode               mtime ## example.txt   45 FALSE DEWR-------------------- 2024-03-05 23:10:25 ## DESCRIPTION 1271 FALSE DEWR-------------------- 2024-03-05 23:10:25 ##                           ctime               atime  exe ## example.txt 2024-03-05 23:10:25 2024-03-05 23:10:25 TRUE ## DESCRIPTION 2024-03-05 23:10:25 2024-03-05 23:10:25 TRUE adf.file.mode(adf.example, paste0(\"DF0:temp/\", list.adf.files(adf.example, \"DF0:temp/\"))) <- c(E = F) adf.file.info(adf.example, paste0(\"DF0:temp/\", list.adf.files(adf.example, \"DF0:temp/\"))) ##             size isdir                     mode               mtime ## example.txt   45 FALSE D-WR-------------------- 2024-03-05 23:10:25 ## DESCRIPTION 1271 FALSE D-WR-------------------- 2024-03-05 23:10:25 ##                           ctime               atime   exe ## example.txt 2024-03-05 23:10:25 2024-03-05 23:10:25 FALSE ## DESCRIPTION 2024-03-05 23:10:25 2024-03-05 23:10:25 FALSE adf.example <-    adf.file.remove(adf.example, \"DF0:temp\") list.adf.files(adf.example, \"DF0:\") ## [1] \"Devs\" \"S\"    \"this\" \"mods\""},{"path":"https://pepijn-devries.github.io/adfExplorer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer, data contributor.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P (2024). adfExplorer: Import Export Amiga Disk Files. R package version 0.1.7, https://pepijn-devries.github.io/adfExplorer/, https://github.com/pepijn-devries/adfExplorer.","code":"@Manual{,   title = {adfExplorer: Import from and Export to Amiga Disk Files},   author = {Pepijn {de Vries}},   year = {2024},   note = {R package version 0.1.7, https://pepijn-devries.github.io/adfExplorer/},   url = {https://github.com/pepijn-devries/adfExplorer}, }"},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"adfexplorer","dir":"","previous_headings":"","what":"Import from and Export to Amiga Disk Files","title":"Import from and Export to Amiga Disk Files","text":"Read mutate virtual Commodore Amiga Disks, stored files (.k.Amiga Disk Files).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import from and Export to Amiga Disk Files","text":"Get CRAN version Get development version R-Universe","code":"install.packages(\"adfExplorer\") install.packages(\"adfExplorer\", repos = c(\"https://pepijn-devries.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Import from and Export to Amiga Disk Files","text":"package comes example disk files directories can listed: can also pull files virtual disk: depth examples see vignette(\"amigaDiskFiles\").","code":"library(adfExplorer) data(\"adf.example\")  list.adf.files(adf.example) #> [1] \"Devs\" \"S\"    \"this\" \"mods\" ## get startup-sequence file and store as a vector of raw data startup <- get.adf.file(adf.example, \"DF0:s/startup-sequence\")  ## As this particular file is UTF8 text we can convert it from raw: startup  |> rawToChar() |> iconv(from = \"ISO-8859-1\", to = \"UTF-8\") |> cat() #> ; The Startup-Sequence is executed after booting #> ; Everything after semicolons are comments and is ignored #> ; By default standard commands are loaded from #> ; the ROM kickstart. Additional commands should be #> ; stored on the disk in the SYS:C directory. #> ; For demonstration purposes we only echo some #> ; text to the screen... Note that this will not #> ; work on Amiga OS <2.0 as \"Echo\" is not available #> ; in older ROM kickstart versions. #>  #> Echo \"c[22m[32mADF Explorer Example Disk\" ; Note that the weird characters at the start are escape-codes to format the text #> Echo \"[0mThis disk was created as an example for the\" #> Echo \"R package 'adfExplorer' by Pepijn de Vries.\""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"developmental-status","dir":"","previous_headings":"","what":"Developmental status","title":"Import from and Export to Amiga Disk Files","text":"years since initial release package. Since release lot changed R skill set. still plans package, requires drastic changes. Therefore, apply minimal maintenance package. Meanwhile work complete overhaul released due time new package. new package : similar features current package. implement modern R features try adhere tidyverse principles. implement recursive procedures C/C++ giving package speed boost. , please enjoy current package .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the disk name of an amigaDisk object — adf.disk.name","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"Get set disk name amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"","code":"# S4 method for amigaDisk adf.disk.name(x)  # S4 method for amigaDisk,character adf.disk.name(x) <- value"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"x amigaDisk object disk name needs obtained changed. value character representation disk's name needs replaced. Disk name needs 1 30 characters long allowed contain colon forward slash.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"Returns character representation disk's name.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"DOS-formatted disks (.amigaDOS) store disk name socalled root block disk. method allows obtain disk's name change (DOS-formatted).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.disk.name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the disk name of an amigaDisk object — adf.disk.name","text":"","code":"if (FALSE) { data(adf.example)  ## get the disk name: adf.disk.name(adf.example)  ## change it if you don't like it: adf.disk.name(adf.example) <- \"MyDisk\"  ## confirm that it has changed: adf.disk.name(adf.example) }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.example.html","id":null,"dir":"Reference","previous_headings":"","what":"An example of an amigaDisk object — adf.example","title":"An example of an amigaDisk object — adf.example","text":"example amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example of an amigaDisk object — adf.example","text":"S4 amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An example of an amigaDisk object — adf.example","text":"amigaDisk object represents 'Old File System' formatted bootable disk. used multiple examples package. contains directory structure files can accessed using package. content example might change future versions.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example of an amigaDisk object — adf.example","text":"","code":"data(\"adf.example\")"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test file or directory existence in an amigaDisk object — adf.file.exists","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"Tests whether specific file (directory) exists amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"","code":"# S4 method for amigaDisk,character adf.file.exists(x, file)  # S4 method for amigaDisk,character dir.exists.adf(x, path)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"x amigaDisk object method check file's existence. file (vector ) character string(s) representing file directory name. Use Amiga specifications file name (see current.adf.dir). Wildcards allowed. path file (vector ) character string(s) representing directory name. Use Amiga specifications path name (see current.adf.dir). Wildcards allowed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"Returns logical value indicating whether file exists . case dir.exists.adf path needs exist needs directory order return TRUE.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"method look file/directory header, based name. header exists, assumed file exists. file/directory checked validity.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test file or directory existence in an amigaDisk object — adf.file.exists","text":"","code":"data(adf.example)  ## This file exists: adf.file.exists(adf.example, \"df0:mods/mod.intro\") #> [1] TRUE  ## But it doesn't exist as a directory dir.exists.adf(adf.example, \"df0:mods/mod.intro\") #> [1] FALSE  ## This file also doesn't: adf.file.exists(adf.example, \"df0:idontexist\") #> [1] FALSE"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a file from an amigaDisk object — adf.file.remove","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"Remove file virtual Amiga floppy disk represented amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"","code":"# S4 method for amigaDisk,character,logical adf.file.remove(x, file, full)  # S4 method for amigaDisk,character,missing adf.file.remove(x, file)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"x amigaDisk onto file put. file character string path virtual floppy file removed. path conform Amiga specs (see current.adf.dir). Wild cards allowed (see details). files directories can removed virtual disk using function. full logical value (default FALSE). set TRUE pointers file removed, also data header data blocks. set FALSE, data left orphans disk. Technically, files can undeleted, unless overwritten.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"Returns amigaDisk object specified file removed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"Remove file virtual Amiga floppy disk (represented amigaDisk object. Make sure virtual disk DOS formatted (see .amigaDOS). method can remove one file time virtual virtual disk, allowed use wild cards source destination names. possible remove entire directory . Use loops remove multiple files/directories virtual disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf.file.remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a file from an amigaDisk object — adf.file.remove","text":"","code":"if (FALSE) { ## This removes a single file from a disk resulting.disk <- adf.file.remove(adf.example, \"df0:mods/mod.intro\")  ## This removes the entire 's' directory and cannot be undone: resulting.disk <- adf.file.remove(adf.example, \"df0:s\", TRUE) }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adfExplorer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adfExplorer: Import from and Export to Amiga Disk Files — adfExplorer-package","title":"adfExplorer: Import from and Export to Amiga Disk Files — adfExplorer-package","text":"Amiga Disk Files (ADF) virtual representations 3.5 inch floppy disks Commodore Amiga. disk drives systems (including modern drives) able read disks. able emulate system, ADF format created. package enables read ADF files import export files virtual DOS-formatted disks.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adfExplorer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adfExplorer: Import from and Export to Amiga Disk Files — adfExplorer-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com [data contributor]","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The amigaBlock class — amigaBlock-class","title":"The amigaBlock class — amigaBlock-class","text":"Commodore Amiga stores data floppy disks 512 byte blocks. class reflects block.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The amigaBlock class — amigaBlock-class","text":"several types blocks. important boot block (used booting Amiga system), root block (containing information disk root directory), header blocks (indicating find file data) data blocks (containing actual file data). See package's vignette (vignette(\"amigaDiskFiles\")) details. use amigaBlock-method extract specific block amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The amigaBlock class — amigaBlock-class","text":"data raw data 'block' data Amiga disk file. block holds 512 bytes information. slot therefore vector length.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The amigaBlock class — amigaBlock-class","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The amigaBlock class — amigaBlock-class","text":"","code":"## create a block with no data: new(\"amigaBlock\") #> 0x000  00000000 00000000 00000000 00000000  ................ #> 0x010  00000000 00000000 00000000 00000000  ................ #> 0x020  00000000 00000000 00000000 00000000  ................ #> 0x030  00000000 00000000 00000000 00000000  ................ #> 0x040  00000000 00000000 00000000 00000000  ................ #> 0x050  00000000 00000000 00000000 00000000  ................ #> 0x060  00000000 00000000 00000000 00000000  ................ #> 0x070  00000000 00000000 00000000 00000000  ................ #> 0x080  00000000 00000000 00000000 00000000  ................ #> 0x090  00000000 00000000 00000000 00000000  ................ #> 0x0A0  00000000 00000000 00000000 00000000  ................ #> 0x0B0  00000000 00000000 00000000 00000000  ................ #> 0x0C0  00000000 00000000 00000000 00000000  ................ #> 0x0D0  00000000 00000000 00000000 00000000  ................ #> 0x0E0  00000000 00000000 00000000 00000000  ................ #> 0x0F0  00000000 00000000 00000000 00000000  ................ #> 0x100  00000000 00000000 00000000 00000000  ................ #> 0x110  00000000 00000000 00000000 00000000  ................ #> 0x120  00000000 00000000 00000000 00000000  ................ #> 0x130  00000000 00000000 00000000 00000000  ................ #> 0x140  00000000 00000000 00000000 00000000  ................ #> 0x150  00000000 00000000 00000000 00000000  ................ #> 0x160  00000000 00000000 00000000 00000000  ................ #> 0x170  00000000 00000000 00000000 00000000  ................ #> 0x180  00000000 00000000 00000000 00000000  ................ #> 0x190  00000000 00000000 00000000 00000000  ................ #> 0x1A0  00000000 00000000 00000000 00000000  ................ #> 0x1B0  00000000 00000000 00000000 00000000  ................ #> 0x1C0  00000000 00000000 00000000 00000000  ................ #> 0x1D0  00000000 00000000 00000000 00000000  ................ #> 0x1E0  00000000 00000000 00000000 00000000  ................ #> 0x1F0  00000000 00000000 00000000 00000000  ................"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"Extract amigaBlock amigaDisk object, replace disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"","code":"# S4 method for amigaDisk,numeric amigaBlock(x, block)  # S4 method for amigaDisk,numeric,amigaBlock amigaBlock(x, block) <- value"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"x amigaDisk object block needs extracted block needs replaced. block numeric identifier (whole numbers ranging 0 1759 (DD disk) 3519 (HD disk)). value amigaBlock object block specified location disk needs replaced.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"amigaBlock object specified location returned. case replace method, amigaDisk object replaced amigaBlock returned.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"Information stored 512 byte blocks floppy disks. method extracts specific block numeric identifier (whole numbers ranging 0 1759 (DD disk) 3519 (HD disk)) amigaDisk object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaBlock-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract block from or replace a block on an amigaDisk object — amigaBlock-method","text":"","code":"## get the root block from the example adf: amigaBlock(adf.example, 880) #> 0x000  00000002 00000000 00000000 00000048  ...............H #> 0x010  00000000 F665FC39 00000000 00000000  ....öeü9........ #> 0x020  00000000 00000000 00000000 00000000  ................ #> 0x030  00000000 00000000 00000000 00000000  ................ #> 0x040  00000000 00000000 00000000 00000000  ................ #> 0x050  00000000 00000000 00000000 00000000  ................ #> 0x060  00000000 00000000 00000000 00000000  ................ #> 0x070  00000373 00000000 00000372 00000000  ...s.......r.... #> 0x080  00000000 00000000 00000000 00000000  ................ #> 0x090  00000000 00000000 00000000 00000000  ................ #> 0x0A0  00000000 00000000 00000000 00000000  ................ #> 0x0B0  00000000 00000000 00000000 00000000  ................ #> 0x0C0  00000000 00000000 00000000 00000000  ................ #> 0x0D0  00000000 00000000 00000375 00000000  ...........u.... #> 0x0E0  00000000 00000374 00000000 00000000  .......t........ #> 0x0F0  00000000 00000000 00000000 00000000  ................ #> 0x100  00000000 00000000 00000000 00000000  ................ #> 0x110  00000000 00000000 00000000 00000000  ................ #> 0x120  00000000 00000000 00000000 00000000  ................ #> 0x130  00000000 00000000 FFFFFFFF 00000371  ........ÿÿÿÿ...q #> 0x140  00000000 00000000 00000000 00000000  ................ #> 0x150  00000000 00000000 00000000 00000000  ................ #> 0x160  00000000 00000000 00000000 00000000  ................ #> 0x170  00000000 00000000 00000000 00000000  ................ #> 0x180  00000000 00000000 00000000 00000000  ................ #> 0x190  00000000 00000000 00000000 00000000  ................ #> 0x1A0  00000000 000038C6 0000027D 00000716  ......8Æ...}.... #> 0x1B0  0D616466 4578616D 706C654F 46530000  .adfExampleOFS.. #> 0x1C0  00000000 00000000 00000000 00000000  ................ #> 0x1D0  00000000 00000000 000038C6 000002B5  ..........8Æ...µ #> 0x1E0  000006DB 000038C6 000001C4 000007E3  ...Û..8Æ...Ä...ã #> 0x1F0  00000000 00000000 00000000 00000001  ................  ## Create a completely blank disk without file system: blank.disk <- new(\"amigaDisk\")  ## Replace the boot block on the blank disk with ## that from the example object: amigaBlock(blank.disk, 0) <- amigaBlock(adf.example, 0)  ## The blank disk now has a boot block, ## but still no file system..."},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert date time objects into raw values — amigaDateToRaw","title":"Convert date time objects into raw values — amigaDateToRaw","text":"function converts date-time objects raw data conform Amiga file system specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert date time objects into raw values — amigaDateToRaw","text":"","code":"amigaDateToRaw(x, format = c(\"long\", \"short\"), tz = \"UTC\")"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert date time objects into raw values — amigaDateToRaw","text":"x (vector ) POSIXt object(s). format character string indicating whether date stored short long integers. tz character string specifying time zone used convert date time object. Note time zone stored Amiga. default Universal time zone (UTC) assumed. get warning use timezone UTC.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert date time objects into raw values — amigaDateToRaw","text":"returns raw data reflecting date-time objects conform Amiga file system specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert date time objects into raw values — amigaDateToRaw","text":"Amiga file system stores date time objects three unsigned short (16 bit) long (32 bit) integers. values number days, minutes ticks (fiftieth second) since 1978-01-01 respectively. values always positive, date time values 1978-01-01 allowed. inverse function can achieved rawToAmigaDate.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert date time objects into raw values — amigaDateToRaw","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDateToRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert date time objects into raw values — amigaDateToRaw","text":"","code":"## Note that using the same date-time with different timezones will ## result in different raw data. The time zone is not stored. amigaDateToRaw(as.POSIXct(\"1978-01-01 13:30\", tz = \"UTC\")) #>  [1] 00 00 00 00 00 00 03 2a 00 00 00 00 amigaDateToRaw(as.POSIXct(\"1978-01-01 13:30\", tz = \"CET\")) #> Warning: 'tzone' attributes are inconsistent #>  [1] 00 00 00 00 00 00 02 ee 00 00 00 00"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDisk-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The amigaDisk class — amigaDisk-class","title":"The amigaDisk class — amigaDisk-class","text":"S4 class representing information Amiga Disk File.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDisk-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The amigaDisk class — amigaDisk-class","text":"Amiga Disk File (ADF) holds raw data Amiga disk order blocks (amigaBlock) physical disks. Amiga Disk can hold kind information, can class. ADF file hold information. size file dictate whether represents double density floppy disk (880 kB) high density floppy disk (1760 kB). disk type also stored class. Finally, current directory stored class. useful DOS-formatted disks (file structure). default set disk's root. (technical) backgrounds please check package's vignette (vignette(\"amigaDiskFiles\")) Use objects constructor (new(\"amigaDisk\")) create completely blank disk (without filesystem). want able transfer files virtual disk, use blank.amigaDOSDisk instead.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDisk-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The amigaDisk class — amigaDisk-class","text":"data raw data virtual disk. vector length 901,120 case double density disk 1,802,240 case high density disk. type character indicating whether virtual disk represents \"DD\" (double density, common) \"HD\" (high density) disk. current.dir integer, pointing block address current directory virtual disk. Use current.adf.dir get set current directory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDisk-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The amigaDisk class — amigaDisk-class","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaDisk-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The amigaDisk class — amigaDisk-class","text":"","code":"## This creates a blank non-bootable, non-DOS disk: new(\"amigaDisk\") #>  #> Amiga (DD) Disk File: #> \tType:\t\t\tNon-bootable Non-DOS"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Amiga integers into raw values — amigaIntToRaw","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"Convert 8, 16, 32-bit signed unsigned integer values raw data, conform Amiga specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"","code":"amigaIntToRaw(x, bits = 8, signed = F)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"x vector class numeric needs converted raw values. bits Number bits represents integer value. 8 positive multitude 8. signed logical value indicating whether numeric values signed (TRUE, default) (FALSE).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"Returns (vector ) raw data, representing integer value(s) conform Amiga specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"Commodore Amiga specified following data formats represent integer data: BYTE (signed 8-bit integer), UBYTE (unsigned 8-bit integer), WORD (signed 16-bit integer), UWORD (unsigned 16-bit integer), LONG (signed 32-bit integer), ULONG, (unsigned 32-bit integer). function converts integers raw data.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/amigaIntToRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Amiga integers into raw values — amigaIntToRaw","text":"","code":"## some unsigned 8-bit integers: ubyte <- sample.int(255, 100, TRUE)  ## The same values as raw data: amigaIntToRaw(ubyte) #>   [1] ad 97 cc 3f e5 66 6f 2f 9f c4 e6 c9 c5 05 ff 18 4f 4d 82 be 37 ab 3e 2b 05 #>  [26] d5 2c bd 22 46 ff bf 04 f0 a2 a3 d9 d6 2b 87 20 b5 46 09 96 ff 0a a0 75 a2 #>  [51] 11 b4 b8 16 5f 81 46 a2 b3 ae 41 19 ef f2 a5 08 a1 e0 6c 53 5c 1c 30 4b da #>  [76] 23 82 57 6a 83 26 c4 ea 41 e7 86 96 93 f9 02 40 28 c1 9c e1 c7 0c b6 29 2a  ## some signed 8-bit integers: byte <- sample.int(255, 100, TRUE) - 128  ## The same values as raw data: amigaIntToRaw(byte, signed = TRUE) #>   [1] c2 e6 e7 6c 9a bc 76 8e 85 67 f3 4c 71 e5 91 8d 66 e1 21 cd 52 a0 45 b7 8b #>  [26] 21 a4 87 17 58 a2 48 c9 b3 e9 3b 7d 26 ed 6d 99 b5 23 ad 52 17 74 2b 84 22 #>  [51] a9 d2 de 13 4c b3 00 11 4a 6c 8d 30 a7 55 64 41 83 87 31 46 5b 8c a7 0b aa #>  [76] a8 76 f1 6c 74 8f 52 ac 36 d5 ba 9d ca 43 64 6d e6 0e c2 79 45 73 52 a5 6a  ## some signed 16-bit integers: word <- sample.int(2^16, 100, TRUE) - 2^15  ## The same values as raw data: amigaIntToRaw(word, 16, TRUE) #>   [1] 72 84 88 38 5a b9 b5 d7 71 dd 47 f8 60 18 7b c9 42 59 43 49 a3 59 27 ef 28 #>  [26] 31 7a bf 5f 65 b7 f4 e3 bb 1d ef e8 28 04 87 84 5c df 0c 2d 90 41 8c bd 42 #>  [51] ea d2 23 40 75 a1 8c da b7 c9 70 2b 42 10 0b fc e3 6b 30 d4 72 41 77 f9 26 #>  [76] 7d 92 2b 43 74 0d 6f 87 f2 ad ba 62 be 1a fa 89 32 98 13 e7 de a0 62 b7 65 #> [101] b4 33 53 d8 c2 de 83 c8 ea 00 38 12 79 8f ab a0 87 eb aa a7 49 35 77 1a ac #> [126] a5 4e 33 3b a1 84 19 2f a2 d3 cd 35 1f 6c f8 18 91 11 21 18 30 17 ea e5 d5 #> [151] 3d ea 9c 98 4c d4 8d 7e 1a ac 09 ed 76 94 a9 53 78 7f 62 96 88 f0 24 fc d0 #> [176] 8e 0a 54 03 fe 5b 46 80 07 71 fa 61 85 81 08 b8 20 3a 4b e1 ca 58 08 89 d6  ## note that 16-bit integers require ## twice as many raw values: length(amigaIntToRaw(word, 16, TRUE)) #> [1] 200 length(amigaIntToRaw(byte, 8, TRUE)) #> [1] 100"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create blank disk with file system — blank.amigaDOSDisk","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"Create virtual blank DOS formatted floppy disk file system .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"","code":"# S4 method for character blank.amigaDOSDisk(   diskname,   disktype = c(\"DD\", \"HD\"),   filesystem = c(\"OFS\", \"FFS\"),   international = F,   dir.cache = F,   bootable = T,   creation.date = Sys.time() )"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"diskname character string desired disk name. Disk name 1 30 characters long, contain colon forward slash characters. disktype Either \"DD\" (double density, common therefore default) \"HD\" (high denisity). type disk blank disk represent. filesystem Either \"OFS\" (old file system) \"FFS\" (fast file system). FFS compatible Amiga OS <2.0. original system, FFS slightly faster can requires less data file system. however less robust: corrupt disks, file recovery difficult. international international mode introduced Amiga OS 2.0. lower versions, international characters mistakenly converted uppercase comparing file names. international mode (set argument TRUE) corrects mistake. international mode compatible Amiga OS <2.0. dir.cache directory cache mode (set argument TRUE) introduced Amiga OS 3.0 (compatible lower versions). real machines allowed slightly faster directory listing (costs disk space). directory cache mode always used combination 'international mode'. bootable argument set TRUE. Minimal executable code added bootblock. code open command line interface disk used boot system. Amiga OS >2.0, 'Startup-Sequence' file needs present , otherwise screen remain black booting. See also boot.block.code data. creation.date POSIXt object. used stored creation date virtual disk. Note Amiga store time zone UTC assumed default. Amiga stores date time positive integers, relative 1st January 1978. result, dates allowed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"Returns blank amigaDisk object file system installed .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"Creates blank amigaDisk object. method differs object constructor (new(\"amigaDisk\")) also installs file system disk. blank disk can thus used write files onto, also usable Amiga emulators. use emulators, object needs saved write.adf method.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/blank.amigaDOSDisk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create blank disk with file system — blank.amigaDOSDisk","text":"","code":"## Create a blank virtual disk compatible with ## Amiga OS 1.x and up (Note that spaces in file and ## disk names are allowed but not recommended): disk.os1x <- blank.amigaDOSDisk(diskname = \"I'm_OS_1.x_compatible\",                                 disktype = \"DD\",                                 filesystem = \"OFS\",                                 international = FALSE,                                 dir.cache = FALSE,                                 bootable = TRUE)  ## create a disk that is compatible with OS 2.x and up ## (no backward compatibility): disk.os2x <- blank.amigaDOSDisk(diskname = \"I'm_OS_2.x_compatible\",                                 disktype = \"DD\",                                 filesystem = \"FFS\",                                 international = TRUE,                                 dir.cache = FALSE,                                 bootable = TRUE)  ## create a disk that is compatible with OS 3.x and up ## (no backward compatibility): disk.os3x <- blank.amigaDOSDisk(diskname = \"I'm_OS_3.x_compatible\",                                 disktype = \"DD\",                                 filesystem = \"FFS\",                                 international = TRUE,                                 dir.cache = TRUE,                                 bootable = TRUE)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/boot.block.code.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal executable code for a bootblock — boot.block.code","title":"Minimal executable code for a bootblock — boot.block.code","text":"minimal piece code required boot command line interface Commodore Amiga.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/boot.block.code.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Minimal executable code for a bootblock — boot.block.code","text":"data frame two columns. first column contains assembled code (raw data). second column contains corresponding Motorola 68000 (main CPU original Commodore Amiga) assembly syntax.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/boot.block.code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal executable code for a bootblock — boot.block.code","text":"first two blocks (amigaDisk) special called boot block. block contain information type disk possibly executable code run boot time. data.frame contains minimal executable code start Amiga command line interface. Amiga OS \\>=2.0 screen stay black unless startup-sequence file present disk. original code Thomas Kessler published Laurent Clévy (http://lclevy.free.fr/adflib/adf_info.html).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/boot.block.code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal executable code for a bootblock — boot.block.code","text":"","code":"data(\"boot.block.code\")  ## To create a basic boot block for a DD disk: bblock <- new(\"amigaBlock\", data =   c(as.raw(c(0x44, 0x4F, 0x53, 0x00, 0xE3, 0x3D, 0x0E, 0x73,   0x00, 0x00, 0x03, 0x70)), unlist(boot.block.code$assembled),   raw(419)) ) ## The raw data preceding the executable code are ## a label, flags and a checksum."},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the current directory of an amigaDisk object — current.adf.dir","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"Get set current directory amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"","code":"# S4 method for amigaDisk current.adf.dir(x)  # S4 method for amigaDisk,character current.adf.dir(x) <- value"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"x amigaDisk object current directory needs obtained changed. value character representation path, needs set current directory. Use Amiga DOS syntax specified details","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"Returns character representation current directory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"default disk's root stored current directory new amigaDisk object. method, current directory can retrieved changed. purpose path specified conform Amiga DOS syntax. Use disk's name \"DF0\" followed colon order refer disk's root. Subdirectories separated forward slashes (\"/\"). Colons forward slashes allowed file directory names. upper lowercase letters allowed file directory names. case ignored identifying files however. packages follow Amiga's full search path (https://wiki.amigaos.net/wiki/AmigaOS_Manual:_AmigaDOS_Working_With_AmigaDOS#Search_Path).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/current.adf.dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the current directory of an amigaDisk object — current.adf.dir","text":"","code":"data(adf.example)  ## by default the current dir is the ## disk's root. The disk name is ## therefore shown when running ## current.adf.dir for the provided ## example data:  current.adf.dir(adf.example) #> [1] \"adfExampleOFS:\"  ## change the current dir: current.adf.dir(adf.example) <- \"DF0:this/is/a/deep/path\"  ## confirm that it has changed: current.adf.dir(adf.example) #> [1] \"adfExampleOFS:this/is/a/deep/path/\"  ## let's set it back to the disk's root: current.adf.dir(adf.example) <- \"DF0:\""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directory on an amigaDisk object — dir.create.adf","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"Create directory virtual Amiga floppy disk represented amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"","code":"# S4 method for amigaDisk,character,missing,missing dir.create.adf(x, path, date, comment)  # S4 method for amigaDisk,character,POSIXt,missing dir.create.adf(x, path, date, comment)  # S4 method for amigaDisk,character,POSIXt,character dir.create.adf(x, path, date, comment)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"x amigaDisk directory created. path Specify directory created x. can specify full path virtual disk conform Amiga DOS syntax (see current.adf.dir details). full path specified new directory created current directory. Note wild cards allowed. date POSIXt object used directory modification date. missing system time used. comment optional character string included directory header comment. longer 79 characters.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"Returns amigaDisk object directory created.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"Create directory virtual Amiga floppy disk represented amigaDisk object. Make sure virtual disk DOS formatted.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/dir.create.adf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directory on an amigaDisk object — dir.create.adf","text":"","code":"if (FALSE) { ## create a blank DOS disk: blank.disk <- blank.amigaDOSDisk(\"blank\", \"DD\", \"FFS\", TRUE, FALSE, FALSE)  ## creating a new directory on the blank disk is easy: blank.disk <- dir.create.adf(blank.disk, \"new_dir\")  ## in the line above, the directory is placed in the ## current directory (the root in this case). Directories ## can also be created by specifying the full path:  blank.disk <- dir.create.adf(blank.disk, \"DF0:new_dir/sub_dir\")  ## check whether we succeeded: list.adf.files(blank.disk)  ## we can even make it the current dir: current.adf.dir(blank.disk) <- \"DF0:new_dir/sub_dir\" }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":null,"dir":"Reference","previous_headings":"","what":"Display raw data in a comprehensive way — displayRawData","title":"Display raw data in a comprehensive way — displayRawData","text":"Cat raw data sink columns ASCII code","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display raw data in a comprehensive way — displayRawData","text":"","code":"displayRawData(x, ncol = 4, col.wid = 4, address.len = 3, hex.upper = T)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display raw data in a comprehensive way — displayRawData","text":"x vector class raw displayed. ncol Number columns hexadecimal code display. col.wid Width column (bytes) display. address.len Length hexadecimal address (number hexadecimal digits) display. hex.upper logical value, specify whether hexadecimals displayed uppercase (TRUE, default) lowercase (FALSE).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display raw data in a comprehensive way — displayRawData","text":"character string send sink also returned function.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display raw data in a comprehensive way — displayRawData","text":"binary data hard decipher function cat raw data hexadecimal code columns, together relative (hexadecimal) address data ASCII translation data. Hexadecimals shown space separated columns improved readability. Special characters replaced dots ASCII representation. Raw data padded zeros end fill remaining columns...","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Display raw data in a comprehensive way — displayRawData","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/displayRawData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display raw data in a comprehensive way — displayRawData","text":"","code":"## Display some raw random data: displayRawData(as.raw(sample.int(100))) #> 0x000  51454F63 1C0C591D 2F606452 30571740  QEOc..Y./`dR0W.@ #> 0x010  0B1A0746 152A2936 3D3E230A 3C1B2262  ...F.*)6=>..<..b #> 0x020  37342C0D 5B584453 0209615F 062D5A48  74,.[XDS..a_.-ZH #> 0x030  4E211101 55334A10 1F433941 25082631  N...U3J..C9A..&1 #> 0x040  142E120E 49200F35 5038425E 47030456  ....I .5P8B^G..V #> 0x050  18164C4B 19542B3B 5C285D3F 4D05321E  ..LK.T+;\\(]?M.2. #> 0x060  27243A13 00000000 00000000 00000000  '.:.............  ## Display the full ASCII table: displayRawData(as.raw(0:255)) #> 0x000  00010203 04050607 08090A0B 0C0D0E0F  ................ #> 0x010  10111213 14151617 18191A1B 1C1D1E1F  ................ #> 0x020  20212223 24252627 28292A2B 2C2D2E2F   .....&'()*+,-./ #> 0x030  30313233 34353637 38393A3B 3C3D3E3F  0123456789:;<=>? #> 0x040  40414243 44454647 48494A4B 4C4D4E4F  @ABCDEFGHIJKLMNO #> 0x050  50515253 54555657 58595A5B 5C5D5E5F  PQRSTUVWXYZ[\\]^_ #> 0x060  60616263 64656667 68696A6B 6C6D6E6F  `abcdefghijklmno #> 0x070  70717273 74757677 78797A7B 7C7D7E7F  pqrstuvwxyz{|}~. #> 0x080  80818283 84858687 88898A8B 8C8D8E8F  ... #> 0x090  90919293 94959697 98999A9B 9C9D9E9F  .. #> 0x0A0  A0A1A2A3 A4A5A6A7 A8A9AAAB ACADAEAF   ¡¢£¤¥¦§¨©ª«¬.®¯ #> 0x0B0  B0B1B2B3 B4B5B6B7 B8B9BABB BCBDBEBF  °±²³´µ¶·¸¹º»¼½¾¿ #> 0x0C0  C0C1C2C3 C4C5C6C7 C8C9CACB CCCDCECF  ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏ #> 0x0D0  D0D1D2D3 D4D5D6D7 D8D9DADB DCDDDEDF  ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß #> 0x0E0  E0E1E2E3 E4E5E6E7 E8E9EAEB ECEDEEEF  àáâãäåæçèéêëìíîï #> 0x0F0  F0F1F2F3 F4F5F6F7 F8F9FAFB FCFDFEFF  ðñòóôõö÷øùúûüýþÿ"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":null,"dir":"Reference","previous_headings":"","what":"File information on virtual amigaDisk objects — adf.file.info","title":"File information on virtual amigaDisk objects — adf.file.info","text":"Obtain file information file virtual amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File information on virtual amigaDisk objects — adf.file.info","text":"","code":"# S4 method for amigaDisk,character adf.file.info(x, path)  # S4 method for amigaDisk,character adf.file.mode(x, path)  # S4 method for amigaDisk,character,character adf.file.mode(x, path) <- value  # S4 method for amigaDisk,character,logical adf.file.mode(x, path) <- value  # S4 method for amigaDisk,character,missing adf.file.time(x, path, which)  # S4 method for amigaDisk,character,character adf.file.time(x, path, which = c(\"m\", \"c\", \"a\"))  # S4 method for amigaDisk,character,missing,POSIXt adf.file.time(x, path, which) <- value  # S4 method for amigaDisk,character,character,POSIXt adf.file.time(x, path, which = c(\"m\", \"c\", \"a\")) <- value  # S4 method for amigaDisk,character adf.file.size(x, path)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File information on virtual amigaDisk objects — adf.file.info","text":"x amigaDisk object method obtain file information. path (vector ) character string(s) representing file directory name. Use Amiga specifications file name (see current.adf.dir). Wildcards allowed. value case adf.file.time object class base::POSIXt. case adf.file.mode either character string representing flags, vector named logical values, name logical represents flag altered (see also details). Character indicating time obtain/modify. One \"m\" (date modified), \"c\" (date created), \"\" (date root modification). parameter works disk's root ignored directory file.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File information on virtual amigaDisk objects — adf.file.info","text":"case replace methods, amigaDisk class object returned file information updated. Otherwise, return requested file information (see also details).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File information on virtual amigaDisk objects — adf.file.info","text":"Use adf.file.mode obtain set character string reflecting file mode flags set, : D: deletable E: executable W: writeable R: readable : archived P: pure command S: script H: hold starting without lower case: applies user starting lower case g: applies group starting lower case o: applies Use adf.file.time obtain set base::POSIXt properties file amigaDisk. Use adf.file.info obtain combination information listed data.frame.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"File information on virtual amigaDisk objects — adf.file.info","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/file.info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File information on virtual amigaDisk objects — adf.file.info","text":"","code":"if (FALSE) { data(adf.example)  adf.file.mode(adf.example,  c(\"mods\", \"mods/mod.intro\")) adf.file.time(adf.example, c(\"mods\", \"mods/mod.intro\")) adf.file.size(adf.example,  c(\"mods\", \"mods/mod.intro\")) adf.file.info(adf.example,  c(\"mods\", \"mods/mod.intro\"))  ## set the writeable flag for a group to TRUE adf.file.mode(adf.example, \"mods/mod.intro\") <- c(gW = T)  ## Set the modified time-stamp to the current system time adf.file.time(adf.example, \"mods/mod.intro\") <- Sys.time() }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a file from an amigaDisk object — get.adf.file","title":"Get a file from an amigaDisk object — get.adf.file","text":"Get files stored virtual amigaDisks raw data copy file.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a file from an amigaDisk object — get.adf.file","text":"","code":"# S4 method for amigaDisk,character,missing get.adf.file(x, source, destination)  # S4 method for amigaDisk,character,character get.adf.file(x, source, destination)  # S4 method for amigaDisk,character,ANY get.adf.file(x, source, destination)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a file from an amigaDisk object — get.adf.file","text":"x amigaDisk object file needs extracted. source Specify source file's path amigaDisk object, conform Amiga specs. See current.adf.dir details specs. destination either file name file connection, allows writing binary data (see e.g., file url). destination missing, file content returned raw data.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a file from an amigaDisk object — get.adf.file","text":"Returns vector raw data argument destination missing. Otherwise returns nothing.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a file from an amigaDisk object — get.adf.file","text":"Amiga DOS formatted disks can store kind file (long disk's capacity allows ). Use method extract files embedded Amiga Disk File (ADF) raw data copy file system.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a file from an amigaDisk object — get.adf.file","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.adf.file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a file from an amigaDisk object — get.adf.file","text":"","code":"data(adf.example)  if (FALSE) { ## get the file \"Startup-Sequence\" from the virtual ## example disk and save as a text file in the ## current working directory: get.adf.file(adf.example, \"DF0:S/Startup-Sequence\", \"startup.txt\") }  ## get the same file as raw data ## by omitting the destination: startup <- get.adf.file(adf.example, \"DF0:S/Startup-Sequence\")  ## Look, it's a text file: startup |> rawToChar() |> iconv(from = \"ISO-8859-1\", to = \"UTF-8\") #> [1] \"; The Startup-Sequence is executed after booting\\n; Everything after semicolons are comments and is ignored\\n; By default standard commands are loaded from\\n; the ROM kickstart. Additional commands should be\\n; stored on the disk in the SYS:C directory.\\n; For demonstration purposes we only echo some\\n; text to the screen... Note that this will not\\n; work on Amiga OS <2.0 as \\\"Echo\\\" is not available\\n; in older ROM kickstart versions.\\n\\nEcho \\\"\\033c\\033[22m\\033[32mADF Explorer Example Disk\\\" ; Note that the weird characters at the start are escape-codes to format the text\\nEcho \\\"\\033[0mThis disk was created as an example for the\\\"\\nEcho \\\"R package 'adfExplorer' by Pepijn de Vries.\\\"\"  if (requireNamespace(\"ProTrackR\", quietly = TRUE)) {   ## look there is a typical ProTracker module on   ## the example disk. You can load it like this:      ## get the file from the virtual disk   ## as raw data   mod.raw <- get.adf.file(adf.example, \"DF0:mods/mod.intro\")    ## open a raw connection with the   ## newly imported raw data   con <- rawConnection(mod.raw, \"rb\")    ## and read it as a ProTracker module   mod <- ProTrackR::read.module(con)   close(con)      ## plot the first sample from the module:   plot(ProTrackR::waveform(ProTrackR::PTSample(mod, 1)),        type = \"l\", ylab = \"amplitude\") } else {   cat(\"You need to install and load the\\nProTrackR package for this part of the example.\") }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the block ID from the physical location on the disk — get.blockID","title":"Get the block ID from the physical location on the disk — get.blockID","text":"Get block identifier based physical location disk (side, cylinder sector) disk type.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the block ID from the physical location on the disk — get.blockID","text":"","code":"# S4 method for character,numeric,numeric,numeric get.blockID(disktype, sector, side, cylinder)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the block ID from the physical location on the disk — get.blockID","text":"disktype character string indicating type disk: DD double density disks. HD high density disks. sector numeric identifier sector disk, ranging 0 10 (DD disks) 21 (HD disks). side numeric identifier side disk (0 1). cylinder numeric identifier cylinder disk, ranging 0 79.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the block ID from the physical location on the disk — get.blockID","text":"Returns numeric identifier corresponding block.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the block ID from the physical location on the disk — get.blockID","text":"Data Amiga floppy disks stored 512 byte blocks. blocks physically stored specific cylinder side specific sector. method returns block identifier based physical location disk. inverse function achieved get.diskLocation method. Note identifiers (indices) base zero, consistency Amiga specifications documentation, opposed base one used R.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the block ID from the physical location on the disk — get.blockID","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.blockID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the block ID from the physical location on the disk — get.blockID","text":"","code":"## Get the block identifier for sectors 0 up to 3 combined with ## cylinders 0 up to 3 on side 0 of the disk: get.blockID(disktype = \"DD\",             sector   = 0:3,             side     = 0,             cylinder = 0:3) #> [1]  0 23 46 69"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the physical location on the disk for a specific block — get.diskLocation","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"Get side, cylinder sector disk, based disk type block id.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"","code":"# S4 method for character,numeric get.diskLocation(disktype, block)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"disktype character string indicating type disk: DD double density disks. HD high density disks. block numeric identifier block. Whole numbers ranging 0 1759 (DD disks) 3519 (HD disks). Note base index zero (consitency Amiga specifications documentation) opposed base one used R.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"Returns list corresponding sector, side cylinder identifiers (numeric).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"Data Amiga floppy disks stored 512 byte blocks. blocks physically stored specific cylinder side specific sector. method returns identifiers physical location based block identifier. inverse function achieved get.blockID method.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/get.diskLocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the physical location on the disk for a specific block — get.diskLocation","text":"","code":"## get the physical location of the first 20 blocks on a DD disk ## and arrange as a data.frame: as.data.frame(get.diskLocation(\"DD\", 0:19)) #>    sector side cylinder #> 1       0    0        0 #> 2       1    0        0 #> 3       2    0        0 #> 4       3    0        0 #> 5       4    0        0 #> 6       5    0        0 #> 7       6    0        0 #> 8       7    0        0 #> 9       8    0        0 #> 10      9    0        0 #> 11     10    0        0 #> 12      0    1        0 #> 13      1    1        0 #> 14      2    1        0 #> 15      3    1        0 #> 16      4    1        0 #> 17      5    1        0 #> 18      6    1        0 #> 19      7    1        0 #> 20      8    1        0"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if amigaDisk object is DOS formatted — is.amigaDOS","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"method checks DOS file structure present amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"","code":"# S4 method for amigaDisk is.amigaDOS(x)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"x amigaDisk object check performed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"Returns logical value, indicating whether disk DOS formatted. , attributes returned value contain information disk DOS compatible.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"Amiga Disk Files DOS file structure . function checks .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.amigaDOS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if amigaDisk object is DOS formatted — is.amigaDOS","text":"","code":"data(adf.example)  ## let's check if the example amigaDisk object ## is DOS formatted:  is.amigaDOS(adf.example) #> [1] TRUE  ## it apparently is"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if amigaDisk object is bootable — is.bootable","title":"Check if amigaDisk object is bootable — is.bootable","text":"function checks amigaDisk object represents bootable disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if amigaDisk object is bootable — is.bootable","text":"","code":"# S4 method for amigaDisk is.bootable(x)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if amigaDisk object is bootable — is.bootable","text":"x amigaDisk object check performed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if amigaDisk object is bootable — is.bootable","text":"Returns logical value, indicating whether disk bootable.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if amigaDisk object is bootable — is.bootable","text":"first two amigaBlock objects disk special called boot block. boot block determine whether Amiga can boot disk. function determine whether Amiga attempt execute machine code present boot block. check whether successful , require emulation Commodore Amiga system.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if amigaDisk object is bootable — is.bootable","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/is.bootable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if amigaDisk object is bootable — is.bootable","text":"","code":"data(adf.example)  ## let's check if the example amigaDisk object ## is bootable:  is.bootable(adf.example) #> [1] TRUE  ## it apparently is"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":null,"dir":"Reference","previous_headings":"","what":"List files in an amigaDisk directory — list.adf.files","title":"List files in an amigaDisk directory — list.adf.files","text":"Get list files specific directory virtual amigaDisk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List files in an amigaDisk directory — list.adf.files","text":"","code":"# S4 method for amigaDisk,missing list.adf.files(x, path)  # S4 method for amigaDisk,character list.adf.files(x, path)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List files in an amigaDisk directory — list.adf.files","text":"x amigaDisk object files listed. path Specify path amigaDisk object, conform Amiga specs, files listed. See current.adf.dir details specs.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List files in an amigaDisk directory — list.adf.files","text":"Returns vector characters listing files specified directory virtual disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List files in an amigaDisk directory — list.adf.files","text":"analogue [base::list.files], method list files specific directory. case files located virtual floppy disk represented amigaDisk object. works DOS-formatted (.amigaDOS) virtual disks.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List files in an amigaDisk directory — list.adf.files","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list.adf.files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List files in an amigaDisk directory — list.adf.files","text":"","code":"data(adf.example)  ## show all files in the root of the example ## disk file: list.adf.files(adf.example) #> [1] \"Devs\" \"S\"    \"this\" \"mods\"  ## you can also list the files in a specified ## directory: list.adf.files(adf.example, \"DF0:mods\") #> [1] \"mod.intro\"  ## For the same path, only now specified ## relatively to the current directory: list.adf.files(adf.example, \"mods\") #> [1] \"mod.intro\""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Amiga Disk File objects — print","title":"Print Amiga Disk File objects — print","text":"method print Amiga Disk File S4 class objects sink.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Amiga Disk File objects — print","text":"","code":"# S4 method for amigaDisk print(x, ...)  # S4 method for amigaBlock print(x, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Amiga Disk File objects — print","text":"x Either amigaDisk amigaBlock object. ... arguments passed methods","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Amiga Disk File objects — print","text":"Returns nothing (NULL).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Amiga Disk File objects — print","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Amiga Disk File objects — print","text":"","code":"data(adf.example)  print(adf.example) #>  #> Amiga (DD) Disk File: #> \tType:\t\t\tbootable DOS #> \tVolume name:\t\tadfExampleOFS #> \tpercentage full:\t2.1% #> \tFast File System:\tFALSE #> \tInternational mode:\tFALSE #> \tDirect cache mode:\tFALSE"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":null,"dir":"Reference","previous_headings":"","what":"Put a file onto an amigaDisk object — put.adf.file","title":"Put a file onto an amigaDisk object — put.adf.file","text":"Put file onto virtual Amiga floppy disk represented amigaDisk object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put a file onto an amigaDisk object — put.adf.file","text":"","code":"# S4 method for amigaDisk,raw,character,POSIXt,character put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,raw,character,POSIXt,missing put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,raw,character,missing,missing put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,character,character,POSIXt,character put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,character,character,POSIXt,missing put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,character,character,missing,missing put.adf.file(x, source, destination, date, comment)  # S4 method for amigaDisk,character,missing,missing,missing put.adf.file(x, source, destination, date, comment)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put a file onto an amigaDisk object — put.adf.file","text":"x amigaDisk onto file put. source Either character string source file's path; vector raw data written destination file. Wildcards allowed (see details) destination character string destination path virtual floppy disk source file put. path conform Amiga specs (see current.adf.dir). destination missing specifies directory, file put current directory (current.adf.dir) specified path x respectively. case, file name source file used. Wild cards allowed (see details). date POSIXt object used file modification date. missing system time used. comment optional character string included file header comment. longer 79 characters.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put a file onto an amigaDisk object — put.adf.file","text":"Returns amigaDisk object onto source file put specified destination.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Put a file onto an amigaDisk object — put.adf.file","text":"Put file raw data local system onto virtual Amiga floppy disk represented amigaDisk object. Make sure virtual disk DOS formatted. method can put one file time onto virtual virtual disk. therefore allowed use wild cards source destination names. Use loops add multiple files onto virtual disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Put a file onto an amigaDisk object — put.adf.file","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/put.adf.file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Put a file onto an amigaDisk object — put.adf.file","text":"","code":"if (FALSE) { ## create a blank disk to put files onto: blank.disk <- blank.amigaDOSDisk(\"blank\", \"DD\", \"OFS\", TRUE, FALSE, FALSE)  ## let's copy the base package 'INDEX' file onto the ## virtual disk: blank.disk <- put.adf.file(blank.disk, system.file(\"INDEX\"))  ## We can also put raw data onto the virtual disk: blank.disk <- put.adf.file(blank.disk, raw(2048), \"DF0:null.dat\")  ## check whether we succeeded: list.adf.files(blank.disk) }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw values into a date time object — rawToAmigaDate","title":"Convert raw values into a date time object — rawToAmigaDate","text":"function converts raw data date time object conform Amiga file system specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw values into a date time object — rawToAmigaDate","text":"","code":"rawToAmigaDate(x, format = c(\"long\", \"short\"), tz = \"UTC\")"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw values into a date time object — rawToAmigaDate","text":"x vector raw values length multitude 6 (short format) 12 (long format). format character string indicating whether date stored short long integers. tz character string specifying time zone used retrieve date time object. Note time zone stored Amiga. default Universal time zone (UTC) assumed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw values into a date time object — rawToAmigaDate","text":"Returns POSIXct object based provided raw data.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw values into a date time object — rawToAmigaDate","text":"Amiga file system stores date time objects three unsigned short (16 bit) long (32 bit) integers. values number days, minutes ticks (fiftieth second) since 1978-01-01 respectively. values always positive, date time values 1978-01-01 allowed. inverse function can achieved amigaDateToRaw.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert raw values into a date time object — rawToAmigaDate","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw values into a date time object — rawToAmigaDate","text":"","code":"## all raw data is zero, so the origin date is returned: rawToAmigaDate(raw(12)) #> [1] \"1978-01-01 UTC\"  ## let's get the date, one day, one minute and 50 ticks from the origin: rawToAmigaDate(amigaIntToRaw(c(1, 1, 50), 32)) #> [1] \"1978-01-02 00:01:01 UTC\""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw values into Amiga integers — rawToAmigaInt","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"Convert raw data 8, 16, 32-bit signed unsigned integer values, conform Amiga specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"","code":"rawToAmigaInt(x, bits = 8, signed = F)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"x vector class raw converted character. bits Number bits represents integer value. 8 positive multitude 8. signed logical value indicating whether integer signed (TRUE, default) (FALSE).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"numeric value (vector values), representing integer data represented provided raw data. Note R defines integer 32-bit signed integers store 32-bit signed values. Therefore numeric value returned rather explicit integer.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"Commodore Amiga specified following data formats represent integer data: BYTE (signed 8-bit integer), UBYTE (unsigned 8-bit integer), WORD (signed 16-bit integer), UWORD (unsigned 16-bit integer), LONG (signed 32-bit integer), ULONG, (unsigned 32-bit integer). function converts raw data integers. Note WORD UWORD also referred SHORT USHORT respectively.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToAmigaInt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw values into Amiga integers — rawToAmigaInt","text":"","code":"## Let's start by obtaining unsigned 8-bit integers: rawToAmigaInt(as.raw(0:255)) #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 #> [199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 #> [217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #> [235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 #> [253] 252 253 254 255  ## note that this is the same as: as.numeric(as.raw(0:255)) #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 #> [199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 #> [217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #> [235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 #> [253] 252 253 254 255  ## but with this function we can also get signed values: rawToAmigaInt(as.raw(0:255), signed = TRUE) #>   [1]    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14 #>  [16]   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29 #>  [31]   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44 #>  [46]   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59 #>  [61]   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74 #>  [76]   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89 #>  [91]   90   91   92   93   94   95   96   97   98   99  100  101  102  103  104 #> [106]  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119 #> [121]  120  121  122  123  124  125  126  127 -128 -127 -126 -125 -124 -123 -122 #> [136] -121 -120 -119 -118 -117 -116 -115 -114 -113 -112 -111 -110 -109 -108 -107 #> [151] -106 -105 -104 -103 -102 -101 -100  -99  -98  -97  -96  -95  -94  -93  -92 #> [166]  -91  -90  -89  -88  -87  -86  -85  -84  -83  -82  -81  -80  -79  -78  -77 #> [181]  -76  -75  -74  -73  -72  -71  -70  -69  -68  -67  -66  -65  -64  -63  -62 #> [196]  -61  -60  -59  -58  -57  -56  -55  -54  -53  -52  -51  -50  -49  -48  -47 #> [211]  -46  -45  -44  -43  -42  -41  -40  -39  -38  -37  -36  -35  -34  -33  -32 #> [226]  -31  -30  -29  -28  -27  -26  -25  -24  -23  -22  -21  -20  -19  -18  -17 #> [241]  -16  -15  -14  -13  -12  -11  -10   -9   -8   -7   -6   -5   -4   -3   -2 #> [256]   -1  ## Furthermore 32 or 16-bit integers can also be obtained. ## Let's look at 16-bit integers: rawToAmigaInt(as.raw(0:255), 16) #>   [1]     1   515  1029  1543  2057  2571  3085  3599  4113  4627  5141  5655 #>  [13]  6169  6683  7197  7711  8225  8739  9253  9767 10281 10795 11309 11823 #>  [25] 12337 12851 13365 13879 14393 14907 15421 15935 16449 16963 17477 17991 #>  [37] 18505 19019 19533 20047 20561 21075 21589 22103 22617 23131 23645 24159 #>  [49] 24673 25187 25701 26215 26729 27243 27757 28271 28785 29299 29813 30327 #>  [61] 30841 31355 31869 32383 32897 33411 33925 34439 34953 35467 35981 36495 #>  [73] 37009 37523 38037 38551 39065 39579 40093 40607 41121 41635 42149 42663 #>  [85] 43177 43691 44205 44719 45233 45747 46261 46775 47289 47803 48317 48831 #>  [97] 49345 49859 50373 50887 51401 51915 52429 52943 53457 53971 54485 54999 #> [109] 55513 56027 56541 57055 57569 58083 58597 59111 59625 60139 60653 61167 #> [121] 61681 62195 62709 63223 63737 64251 64765 65279  ## Note that 16-bit integers require twice as many bytes ## as 8 bit integers: length(rawToAmigaInt(as.raw(0:255), 16)) #> [1] 128 length(rawToAmigaInt(as.raw(0:255), 8)) #> [1] 256"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw data into a bitmap or vice versa — rawToBitmap","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"Convert raw data bitmap vice versa (.e., binary data) conform Amiga specifications.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"","code":"rawToBitmap(x, invert.bytes = F, invert.longs = T)  bitmapToRaw(x, invert.bytes = T, invert.longs = T)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"x vector raw data, case rawToBitmap used. vector raw, interger logical values used case bitmapToRaw. latter case value vector interpreted bit multiple 8 long. invert.bytes logical value. set TRUE, bit order bytes reversed. invert.longs logical value. set TRUE, bit order long values (32 bits) reversed. x multiple length 32 bits 4 bytes, x padded zeros right, result trimmed correspond length x. Note data might get lost way.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"Returns vector raw data case bitmapToRaw, vector binary raw values case rawToBitmap.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"bitmap simply put map bits (binary data, can interpeted 0 1; FALSE TRUE). Bitmaps can several purposes, also Commodore Amiga. Amiga file system uses bitmap indicates blocks occupied data free. Bitmaps can also used bitmap images bit indicates color used specific pixel image. function can used convert raw data usable bitmaps vice versa. Commodore Amiga big-endian system (significant bit first) using 32 bit CPU, may sometimes necessary invert bits byte longs (4 bytes, 32 bits), can done arguments 'invert.bytes' 'invert.longs' respectively.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/rawToBitmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw data into a bitmap or vice versa — rawToBitmap","text":"","code":"## The bitmap block of the example disk is located at block ## number 882 (note that this is not true for all disks, ## the actual location is stored in the root block) data(adf.example) bitmap.block <- amigaBlock(adf.example, 881)  ## bitmap data are stored in bytes 5 up to 224 in this block: bitmap.raw <- bitmap.block@data[5:224]  ## let's get the bitmap from the raw data: bitmap <- rawToBitmap(bitmap.raw)  ## Whe can now get the occupied blocks (minus one is used for ## the discrepancy in indexing): which(bitmap != as.raw(0x01)) - 1 #>  [1] 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 #> [20] 897 898 899 900 901 902 903 904 905 906 907 908 909 913 914 915  ## we can also do the reverse: bitmap.raw.new <-  bitmapToRaw(bitmap) ## it should be the same as the original raw data: all(bitmap.raw.new == bitmap.raw) #> [1] TRUE  ## WARNING: don't use these methods to directly ## modify an amigaDisk objects bitmap block. The ## file system on that object may get corrupted. ## All methods in this package should update the ## bitmap block automatically and cleanly..."},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an Amiga Disk File — read.adf","title":"Read an Amiga Disk File — read.adf","text":"Read data Amiga Disk File (ADF) amigaDisk object. Alternatively data can read ADZ file.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an Amiga Disk File — read.adf","text":"","code":"# S4 method for character read.adf(file)  # S4 method for ANY read.adf(file)  # S4 method for character read.adz(file)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an Amiga Disk File — read.adf","text":"file Either file name file connection, allows reading binary data (see e.g., file url). read.adz accepts file names.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an Amiga Disk File — read.adf","text":"Returns amigaDisk object read provided Amiga disk file","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an Amiga Disk File — read.adf","text":"Amiga Disk Files usually .adf-extension file name. 880 kB (double density) 1760 kB (high density) size. function can read files. Alternatively, ADZ files can also read. essentially gzipped ADF files. Note package read extended ADF files containing information disk's Modified frequency modulation (MFM). information typically required copy protected disk's therefore scope package.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read an Amiga Disk File — read.adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read.adf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an Amiga Disk File — read.adf","text":"","code":"if (FALSE) { ## In order to read an adf-file, we first need one. ## so let's first write the example object to a file: data(adf.example)  ## write it to the current working directory: write.adf(adf.example, \"test.adf\")  ## now we can read it again: my.disk <- read.adf(\"test.adf\") print(my.disk)  ## and this is how you read it, ## using a connection: con <- file(\"test.adf\", \"rb\") my.disk2 <- read.adf(con) close(con)  print(my.disk2)  ## Alternatively, you can work with ADZ files: write.adz(adf.example, \"test.adz\") my.disk3 <- read.adz(\"test.adz\")  print(my.disk3) }"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an amigaDisk object to an ADF file — write.adf","title":"Write an amigaDisk object to an ADF file — write.adf","text":"Write amigaDisk object Amiga Disk File (ADF) alternatively ADZ file.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an amigaDisk object to an ADF file — write.adf","text":"","code":"# S4 method for amigaDisk,ANY write.adf(x, file)  # S4 method for amigaDisk,character write.adf(x, file)  # S4 method for amigaDisk,character write.adz(x, file)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an amigaDisk object to an ADF file — write.adf","text":"x amigaDisk object needs saved ADF file. file either file name write , file connection, allows write binary data (see file). write.adz accepts file name.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an amigaDisk object to an ADF file — write.adf","text":"Writes ADF file returns nothing.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an amigaDisk object to an ADF file — write.adf","text":"Use function write amigaDisk objects binary data -called Amiga Disk Files (ADF). files can used input Amiga emulator software. Alternatively, object can saved 'write.adz', essentially gzipped version ADF file.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an amigaDisk object to an ADF file — write.adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/write.adf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an amigaDisk object to an ADF file — write.adf","text":"","code":"if (FALSE) { ## Let's write the example data to an ADF file: data(adf.example)  ## Let's put it in the current working directory: write.adf(adf.example, \"test.adf\")  ## You can also use file connections to do the same: con <- file(\"test2.adf\", \"wb\") write.adf(adf.example, con) close(con)  ## Last but not least the same object can be saved ## as an adz file: write.adz(adf.example, \"test.3.adz\") }"},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v017-release-date-2023-03-05","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.7 (Release date: 2023-03-05)","title":"adfExplorer v0.1.7 (Release date: 2023-03-05)","text":"added adf.file.info, adf.file.mode, adf.file.time adf.file.size methods. added dir.exists.adf improved adf.file.exists Corrections updates manual vignettes Added pkgdown website","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v016-release-date-2021-09-05","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.6 (Release date: 2021-09-05)","title":"adfExplorer v0.1.6 (Release date: 2021-09-05)","text":"CRAN release: 2021-09-05 URL fix vignette pass CRAN checks","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v015-release-date-2021-09-04","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.5 (Release date: 2021-09-04)","title":"adfExplorer v0.1.5 (Release date: 2021-09-04)","text":"Added ‘remove.adf.file’ method Updated manual vignette Minor correction manual","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v014-release-date-2018-03-05","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.4 (Release date: 2018-03-05)","title":"adfExplorer v0.1.4 (Release date: 2018-03-05)","text":"CRAN release: 2018-03-05 Fix pass CRAN checks.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v013-release-date-2018-03-04","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.3 (Release date: 2018-03-04)","title":"adfExplorer v0.1.3 (Release date: 2018-03-04)","text":"Minor corrections manual. Directories can now created virtual Amiga disk ‘dir.create.adf’ method. newly added method ‘put.adf.file’ now possible put file onto virtual Amiga disk. Functions ‘rawToBitmap’ ‘bitmapToRaw’ improved now exported documented.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v012-release-date-2017-11-03","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.2 (Release date: 2017-11-03)","title":"adfExplorer v0.1.2 (Release date: 2017-11-03)","text":"CRAN release: 2017-11-03 Added adf.file.exists method. Modified ‘displayRawData’ convert special characters dots. Minor adjustments manual Vignette contained r-code output non-supported characters. quick fix display output now suppressed vignette.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v011-release-date-2017-10-28","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.1 (Release date: 2017-10-28)","title":"adfExplorer v0.1.1 (Release date: 2017-10-28)","text":"CRAN release: 2017-10-30 First release: Read write adf files Detect presence file system (Amiga OS 3.x earlier) List files within adf Retrieve files within adf files","code":""}]
