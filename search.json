[{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement https://www.github.com/pepijn-devries/adfExplorer/DESCRIPTION. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-is-it","dir":"Articles","previous_headings":"adf_device","what":"What is it?","title":"ADF S3 Class Objects","text":"Amiga Disk Files (ADF) file representations hardware disks. adf_device class used represent connection files. can seen virtual device. file remains disk, adf_device opens file connection . Underneath S3 class object type externalptr.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"how-can-it-be-initialized","dir":"Articles","previous_headings":"adf_device","what":"How can it be initialized?","title":"ADF S3 Class Objects","text":"adf_device can initiated opening ADF ADZ (zipped ADF) file connect_adf(). can also initiated creating new device create_adf_device(). device needs stored file, need specify destination path. example uses temporary file purpose.","code":"library(adfExplorer, warn.conflicts = FALSE) adz_file <- system.file(\"example.adz\", package = \"adfExplorer\") my_device <- connect_adf(adz_file) adf_file <- tempfile(fileext = \".adf\") new_device <- create_adf_device(adf_file)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-can-i-do-with-it","dir":"Articles","previous_headings":"adf_device","what":"What can I do with it?","title":"ADF S3 Class Objects","text":"Well, depends. just created device create_adf_device(), like object named new_device example , contain file system (see vignette(\"file_system_modes\")). Virtual disks without file system, contain unspecified data custom track loader, can contain instructions running independently operating system. can inspect disks reading writing blocks, logical unit data disk. virtual disk contain file system, like one opened connect_adf() stored object named my_device, can lot . can query files directories disk. Read, write, copy, move, manipulate delete files. example shows list entries (files directories) disk’s root.","code":"list_adf_entries(my_device) #> DIR  DEWR...     Devs #> DIR  DEWR...        S #> DIR  DEWR...     this #> DIR  DEWR...     mods"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"end-of-life","dir":"Articles","previous_headings":"adf_device","what":"End of life","title":"ADF S3 Class Objects","text":"externalptr object adf_device cleaned automatically R’s garbage collector goes scope. However, maintains open connection file disk, always wise close() device done . Calling close() adf_device also automatically close nested connections files virtual device (see also adf_file_con)","code":"close(new_device) ## Let's keep `my_device` open to be used in examples below"},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-is-it-1","dir":"Articles","previous_headings":"adf_file_con","what":"What is it?","title":"ADF S3 Class Objects","text":"connection file virtual device represented adf_device class objects. Well… Technically, isn’t connection really, CRAN’s policy allow call non API entry points R. required setup proper connection. Instead, adf_file_con mockup using externalptr type mimic R connections. essence, behaves much like connection R (details ).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"how-can-it-be-initialized-1","dir":"Articles","previous_headings":"adf_file_con","what":"How can it be initialized?","title":"ADF S3 Class Objects","text":"adf_file_con object can initiated using call adf_file_con(). purpose, first need connect virtual device containing file system. ’ll use my_device opened earlier examples. can use path file virtual device open connection shown . want open writable connections virtual device, need initiate device without write protection. writable connection can also used create new files virtual device.","code":"con <- adf_file_con(my_device, \"DF0:mods/mod.intro\")  summary(con) #> $description #> [1] \"mod.intro\" #>  #> $class #> [1] \"adf_file_con\" #>  #> $mode #> [1] \"rb\" #>  #> $text #> [1] \"binary\" #>  #> $opened #> [1] \"opened\" #>  #> $`can read` #> [1] \"yes\" #>  #> $`can write` #> [1] \"no\""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-can-i-do-with-it-1","dir":"Articles","previous_headings":"adf_file_con","what":"What can I do with it?","title":"ADF S3 Class Objects","text":"Depending set option writable calling adf_file_con, can either read / write connection. default connection opened read-. can use readBin() read binary data connection. Note adf_file_con() always opens connection ‘binary’, can also use reading writing text. basically, readLines(), writeBin() writeLines() available (latter two obviously connection writable). addition, can tell current byte offset file located seek(). can also use set offset specific location.","code":"readBin(con, \"raw\", 20L) #>  [1] 69 6e 74 72 6f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 seek(con) #> [1] 20 seek(con, 30L) #> [1] 30"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"end-of-life-1","dir":"Articles","previous_headings":"adf_file_con","what":"End of life","title":"ADF S3 Class Objects","text":"Like connection good practice close() done. adf_file_con still open parent adf_device closed, automatically closed. can longer accessed virtual device available.","code":"close(con)"},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-is-it-2","dir":"Articles","previous_headings":"virtual_path","what":"What is it?","title":"ADF S3 Class Objects","text":"vectorised list lists. nested list contains two elements: adf_device class object character string, specifying path file directory virtual device. outer list just contains collection .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"how-can-it-be-initialized-2","dir":"Articles","previous_headings":"virtual_path","what":"How can it be initialized?","title":"ADF S3 Class Objects","text":"can initialised calling virtual_path(). Note file necessarily exist order create virtual path. doesn’t create kind connection file, can use open one.","code":"virtual_path(my_device, \"DF0:s/startup-sequence\") #> FILE DEWR----   0.6 kB Startup-Sequence virtual_path(my_device, \"idontexist\") #> Invalid path"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-can-i-do-with-it-2","dir":"Articles","previous_headings":"virtual_path","what":"What can I do with it?","title":"ADF S3 Class Objects","text":"virtual_path means refer files directory virtual device. also helps set processes pipe operator (|>). vignette(\"virtual_path\") dedicated describing object usage detail.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"end-of-life-2","dir":"Articles","previous_headings":"virtual_path","what":"End of life","title":"ADF S3 Class Objects","text":"just list. can just call rm() get rid .","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-is-it-3","dir":"Articles","previous_headings":"adf_block","what":"What is it?","title":"ADF S3 Class Objects","text":"representation raw data logical unit virtual device 512 bytes. simply vector raw data.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"how-can-it-be-initialized-3","dir":"Articles","previous_headings":"adf_block","what":"How can it be initialized?","title":"ADF S3 Class Objects","text":"new block block can created new_adf_block(). initialised null bytes. can also coerce raw vector adf_block. can also intialise block reading virtual device","code":"block1 <- new_adf_block() ## a block with random data block2 <- as_adf_block(as.raw(sample.int(n=256L, size = 512L, replace = TRUE) - 1L)) ## This will read the initial 'boot' block ## from the virtual device block3 <- read_adf_block(my_device, 0L)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"what-can-i-do-with-it-3","dir":"Articles","previous_headings":"adf_block","what":"What can I do with it?","title":"ADF S3 Class Objects","text":"can read blocks virtual disk read_adf_block() write specific sector virtual disk write_adf_block(). careful can damage file system track loader virtual disk don’t know .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/adf_objects.html","id":"end-of-life-3","dir":"Articles","previous_headings":"adf_block","what":"End of life","title":"ADF S3 Class Objects","text":"can just removed memory calling rm(). actual link virtual device, removing adf_block class object memory affect virtual device.","code":"rm(block1, block2, block3)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/file_system_modes.html","id":"fast-file-system-vs--old-file-system","dir":"Articles","previous_headings":"","what":"Fast File System vs. Old File System","title":"ADF File System Modes","text":"Amiga OS version 2.0, -called Fast File System (FFS) introduced. previous file system named time, now commonly referred Old File System (OFS). OFS sacrifices disk space validation purposes, making robust case data recovery disk got damaged. advantage dropped FFS making slightly faster (original machines) gaining disk space file data. FFS backward compatability. disks formatted file systems read Amiga OS versions <2.0.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/file_system_modes.html","id":"international-mode","dir":"Articles","previous_headings":"","what":"International mode","title":"ADF File System Modes","text":"OS version 2.0 ‘international mode’ also introduced. mode meant correct mistake routine convert text upper case. Amiga file names can lower upper case characters. file name matching, case ignored. purpose, file names shifted upper case file name matching routines. Amiga uses ISO 8859 Latin-1 character set, older operating systems (<2.0), international characters (e.g., ‘ø’) capitalised. mistake corrected OS 2.0, optional. combination ‘directory cache mode’ (see ), international mode mandatory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/file_system_modes.html","id":"directory-caching","dir":"Articles","previous_headings":"","what":"Directory Caching","title":"ADF File System Modes","text":"Amiga OS 3.0, ‘directory cache mode’ introduced. directory cache mode, one blocks stored directory (including root) basic information files stored directory. older versions, directory header stored pointers files directory. meant older OS versions header file (scattered around disk) needed loaded, order list files directory. directory cache mode information stored one block (necessary), faster listing directory content. original machine , floppy disk drives pretty slow. Note using ‘directory cache’ mode requires larger storage overhead file system, leaving less capacity actual file data.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/file_system_modes.html","id":"creating-disks-with-diferent-modes","dir":"Articles","previous_headings":"","what":"Creating disks with diferent modes","title":"ADF File System Modes","text":"create blank disk create_adf_device(), contains data . order store files virtual disk, need format file system. can achieved prepare_adf_device(). function can also specify modes listed want use disk:","code":"library(adfExplorer, warn.conflicts = FALSE)  disk_file <- tempfile(fileext = \".adf\")  ## Create a blank device and create a connection to it: new_device <- create_adf_device(disk_file, write_protected = FALSE)  ## Format the device and install a file system: prepare_adf_device(   dev           = new_device,   name          = \"Example_disk\",   ffs           = TRUE,  ## Use fast file system   international = TRUE,  ## Use international mode   dircache      = FALSE) ## Don't use directory caching. #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: Example_disk (0.2%)  ## Don't forget to close the connection when you are done: close(new_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/version2.html","id":"motivation-for-adfexplorer-version-2","dir":"Articles","previous_headings":"","what":"Motivation for adfExplorer version 2","title":"Version 2.0","text":"vignette explains version 2.0.0 completely rewritten. also provide hands examples showing versions >=2.0.0 work differently older versions can modify R code switching latest version. version 2.0.0 everything coded R. Although, technically lot achieved, effective. order work Amiga Disk Files, entire file first needed copied memory, save object memory back disk manipulation. Consider case want extract file virtual disk store local drive. schematics show process old situation. ADF file first needs copied memory. file data object needs extracted copy. file data can stored disk: working approach , learned existence ADFlib. decided start scratch set efficient design resulting version 2.0.0. took C code ADFlib build interface R C++. strategy several advantages: wheel doesn’t reinvented, ADFlib already implemented core functionalities interacting Amiga Disk Files. Custom R connections can created. allows modify ADF files place without copy memory first. program needs compiled new strategy doesn’t need move data back forth memory uses compiled code, much faster (see also benchmark test ). Furthermore, can create connections files virtual device directly read write files. need create physical copies virtual file. process extracting file ADF device version 2.0.0 look something like :","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/version2.html","id":"switching-from-version-2-to-2","dir":"Articles","previous_headings":"","what":"Switching from version <2 to >=2","title":"Version 2.0","text":"code using adfExplorer versions 2.0.0, recommend switching newer version earliest convenience. Partly reasons listed , also many functions old release deprecated. versions 2.0.0 use different syntax, put examples side side, help translate code. Let’s start opening Amiga Disk File: Show change current dir: List entries directory. Note versions 2.0.0 capability list entries recursively (nested subdirectories): Read file virtual disk: Clean :","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer\")  # ---------------- adfExplorer library(adfExplorer, warn.conflicts = FALSE)  # ---------------- Old code # my_disk1 <- read.adz(adz_file)  # ---------------- New code my_disk2 <- connect_adf(adz_file) # ---------------- Old code # current.adf.dir(my_disk1) # current.adf.dir(my_disk1) <- \"s\"  # ---------------- New code adf_directory(my_disk2) #> ROOT                   adfExampleOFS adf_directory(my_disk2) <- \"s\" # ---------------- Old code # list.adf.files(my_disk1, \"DF0:\")  # ---------------- New code list_adf_entries(my_disk2, \"DF0:\", recursive = TRUE) #> DIR  DEWR...     Devs #> FILE DEWR...iguration #> DIR  DEWR...        S #> FILE DEWR...-Sequence #> DIR  DEWR...     this #> DIR  DEWR...       is #> DIR  DEWR...        a #> DIR  DEWR...     deep #> DIR  DEWR...     path #> DIR  DEWR...     mods #> FILE DEWR...mod.intro # ---------------- Old code # get.adf.file(my_disk1, \"startup-sequence\") |> #   rawToChar()  # ---------------- New code con <- adf_file_con(my_disk2, \"startup-sequence\") readLines(con, warn = FALSE) #>  [1] \"; The Startup-Sequence is executed after booting\"                                                                                          #>  [2] \"; Everything after semicolons are comments and is ignored\"                                                                                 #>  [3] \"; By default standard commands are loaded from\"                                                                                            #>  [4] \"; the ROM kickstart. Additional commands should be\"                                                                                        #>  [5] \"; stored on the disk in the SYS:C directory.\"                                                                                              #>  [6] \"; For demonstration purposes we only echo some\"                                                                                            #>  [7] \"; text to the screen... Note that this will not\"                                                                                           #>  [8] \"; work on Amiga OS <2.0 as \\\"Echo\\\" is not available\"                                                                                      #>  [9] \"; in older ROM kickstart versions.\"                                                                                                        #> [10] \"\"                                                                                                                                          #> [11] \"Echo \\\"\\033c\\033[22m\\033[32mADF Explorer Example Disk\\\" ; Note that the weird characters at the start are escape-codes to format the text\" #> [12] \"Echo \\\"\\033[0mThis disk was created as an example for the\\\"\"                                                                               #> [13] \"Echo \\\"R package 'adfExplorer' by Pepijn de Vries.\\\"\" close(con) # ---------------- Old code # rm(my_disk1)  # ---------------- New code close(my_disk2) rm(my_disk2)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/version2.html","id":"benchmarking-version-0-1-8-against-2-0-0","dir":"Articles","previous_headings":"","what":"Benchmarking version 0.1.8 against 2.0.0","title":"Version 2.0","text":"set tasks defined evaluate computational time: open ADF file; show current dir; set current directory specific path; read small text file virtual device; list dir file entries disk’s root. plot shows time took complete tasks version 0.1.8 version 2.0.0. latter nearly 5 times faster older version.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/virtual_paths.html","id":"virtual-paths","dir":"Articles","previous_headings":"","what":"Virtual paths","title":"Virtual Paths","text":"computing, path unique identifier file directory system. usually represented character string. adfExplorer package introduces virtual path path file directory virtual device. order define virtual path, first need virtual device work . code show set connection Amiga Disk File provided package example.","code":"library(adfExplorer, warn.conflicts = FALSE)  adz_file <- system.file(\"example.adz\", package = \"adfExplorer\") my_device <- connect_adf(adz_file)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/virtual_paths.html","id":"full-path","dir":"Articles","previous_headings":"Virtual paths","what":"Full path","title":"Virtual Paths","text":"full path always starts root file system. several alternatives refer disk’s root, needs followed colon character. Option 1 use devices logical name. floppy disk first station called \"DF0:\": device happens system’s device can refer \"SYS:\". device also treated system’s device. can use: course, know disk’s name, can also use refer root: doesn’t matter options use, refer root. root, can specify subsequent path file directory. directories separated forward slashes Amiga. use: refers file ‘startup-sequence’ directory ‘s’ turn located disk’s root. Note resulting displayed file name contains uppercase characters, whereas requested path . Amiga paths case insensitive.","code":"virtual_path(my_device, \"DF0:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"SYS:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"adfExampleOFS:\") #> ROOT                   adfExampleOFS virtual_path(my_device, \"DF0:s/startup-sequence\") #> FILE DEWR----   0.6 kB Startup-Sequence"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/virtual_paths.html","id":"relative-path","dir":"Articles","previous_headings":"Virtual paths","what":"Relative path","title":"Virtual Paths","text":"can also use relative paths. paths specified current directory device onward. connect device, current directory automatically set disk’s root. skip root wish refer file :","code":"virtual_path(my_device, \"s/startup-sequence\") #> FILE DEWR----   0.6 kB Startup-Sequence"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/virtual_paths.html","id":"cleaning-up","dir":"Articles","previous_headings":"","what":"Cleaning up","title":"Virtual Paths","text":"Don’t forget cleanup close connection virtual device","code":"close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/articles/virtual_paths.html","id":"a-note-on-disk-file-and-directory-names","dir":"Articles","previous_headings":"","what":"A note on disk, file and directory names","title":"Virtual Paths","text":"name disk, file directories consist least 1 UTF8 character, maximum 30 characters. can use lower upper case characters name. can use almost character name, advisable use alphanumerical characters, spaces periods. characters really allowed Amiga file names forward slashes colons, used path separators.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer. Laurent Clévy. Author, copyright holder.           Creator original ADFlib library","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P, Clévy L (2025). adfExplorer: Access Manipulate Amiga Disk Files. R package version 2.0.3, https://pepijn-devries.github.io/adfExplorer/.","code":"@Manual{,   title = {adfExplorer: Access and Manipulate Amiga Disk Files},   author = {Pepijn {de Vries} and Laurent Clévy},   year = {2025},   note = {R package version 2.0.3},   url = {https://pepijn-devries.github.io/adfExplorer/}, }"},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"adfexplorer","dir":"","previous_headings":"","what":"Access and Manipulate Amiga Disk Files","title":"Access and Manipulate Amiga Disk Files","text":"adfExplorer can used read write virtual Amiga Disks, .k.Amiga Disk Files (ADF).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access and Manipulate Amiga Disk Files","text":"can install development version adfExplorer r-universe : install latest version CRAN:","code":"install.packages(\"adfExplorer\", repos = c(\"https://pepijn-devries.r-universe.dev\", \"https://cloud.r-project.org\")) install.packages(\"adfExplorer\")"},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"amiga-disk-files","dir":"","previous_headings":"Background","what":"Amiga Disk Files","title":"Access and Manipulate Amiga Disk Files","text":"Commodore Amiga home computer relied heavily ’s build-3.5 inch floppy disk drive late eighties early nineties. Amiga popular system nowadays can accurately emulated modern machines. problem emulation Amiga modern machines longer floppy disk drives. , usually physically able read Amiga formatted disks. overcome problem, Amiga Disk File (ADF) created. files virtual representation floppy disks can used emulation.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"legal-notes","dir":"","previous_headings":"Background > Amiga Disk Files","what":"Legal notes","title":"Access and Manipulate Amiga Disk Files","text":"Emulating Commodore Amiga hardware , far can tell, legal. However, Amiga operating system stored read memory chip. commonly referred kickstart. kickstart software still protected copyright law. Licensed copies can bought legally AmigaForever. true much Amiga software, still protected copyright. Note analysing ADF files adfExplorer package don’t need kickstart software. Just make sure ADF files use contain data software (don’t need) licence.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"the-adfexplorer-package","dir":"","previous_headings":"Background","what":"The adfExplorer package","title":"Access and Manipulate Amiga Disk Files","text":"package allow analyse Amiga Disk Files (ADF) R scripting language. can also used transfer files ADF batches, e.g. preparing disks emulation purposes. focus older Amiga operating systems (.e., OS 3.x less), familiar systems. newer versions floppy disks became less important anyway. Note package read extended ADF files containing information disk’s Modified Frequency Modulation (MFM). information typically required copy protected disks therefore scope package.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Access and Manipulate Amiga Disk Files","text":"","code":"library(adfExplorer) #>  #> Attaching package: 'adfExplorer' #> The following objects are masked from 'package:base': #>  #>     readBin, readLines, writeBin, writeLines  ## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer\") my_device <- connect_adf(adz_file)  ## Open a connection to a file on the virtual device fcon <- adf_file_con(my_device, \"DF0:s/startup-sequence\")  ## Read from the file my_startup <- readLines(fcon, warn = FALSE)  ## Close the file close(fcon)  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Access and Manipulate Amiga Disk Files","text":"adfExplorer package R interface around ADFlib library. package possible without work Laurent Clévy, Tomasz Wolak many contributors ADFlib.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access and Manipulate Amiga Disk Files","text":"Please note adfExplorer project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adfExplorer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adfExplorer: Access and Manipulate Amiga Disk Files — adfExplorer-package","title":"adfExplorer: Access and Manipulate Amiga Disk Files — adfExplorer-package","text":"Amiga Disk Files (ADF) virtual representations 3.5 inch floppy disks Commodore Amiga. disk drives systems (including modern drives) able read disks. 'adfExplorer' package enables establish R connections files virtual DOS-formatted disks, can use read write files.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adfExplorer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adfExplorer: Access and Manipulate Amiga Disk Files — adfExplorer-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com (ORCID) Authors: Laurent Clévy (Creator original ADFlib library) [copyright holder]","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Read or write raw data blocks to a virtual device — read_adf_block","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"Amiga file system structured around 512 byte blocks. double density floppy disk consists 1760 blocks 512 bytes. read_adf_block write_adf_block can used transform raw data virtual devices (created create_adf_device() connect_adf()). Note writing raw data disk corrupt file system device. generally advised unless know .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"","code":"read_adf_block(dev, sector, ...)  # S3 method for class 'adf_device' read_adf_block(dev, sector, ...)  write_adf_block(dev, sector, data, ...)  # S3 method for class 'adf_device' write_adf_block(dev, sector, data, ...)  # S3 method for class 'raw' write_adf_block.adf_device(dev, sector, data, ...)  # S3 method for class 'adf_block' write_adf_block.adf_device(dev, sector, data, ...)  # Default S3 method write_adf_block.adf_device(dev, sector, data, ...)  as_adf_block(data, ...)  new_adf_block()"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). sector Sector ID block wish read/write. integer value. double density disks, ID ranges 0 1759. ... Ignored data Block data (raw vector length 512) wish write virtual device","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"case write_adf_block NULL returned invisibly. case read_adf_block raw data returned adf_block class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read or write raw data blocks to a virtual device — read_adf_block","text":"","code":"my_device <- demo_adf(write_protected = FALSE)  info <- adf_entry_info(my_device, \"S/startup-sequence\")  filedata_block <- read_adf_block(my_device, rev(info[[1]]$dataBlocks)[[1]]) filedata_block #> 0x000  00000008 00000393 00000001 000001E8  ..............è #> 0x010  00000395 5161C69B 3B205468 65205374  ...QaÆ; The St #> 0x020  61727475 702D5365 7175656E 63652069  artup-Sequence i #> 0x030  73206578 65637574 65642061 66746572  s executed after #> 0x040  20626F6F 74696E67 0A3B2045 76657279   booting.; Every #> 0x050  7468696E 67206166 74657220 73656D69  thing after semi #> 0x060  636F6C6F 6E732061 72652063 6F6D6D65  colons are comme #> 0x070  6E747320 616E6420 69732069 676E6F72  nts and is ignor #> 0x080  65640A3B 20427920 64656661 756C7420  ed.; By default  #> 0x090  7374616E 64617264 20636F6D 6D616E64  standard command #> 0x0A0  73206172 65206C6F 61646564 2066726F  s are loaded fro #> 0x0B0  6D0A3B20 74686520 524F4D20 6B69636B  m.; the ROM kick #> 0x0C0  73746172 742E2041 64646974 696F6E61  start. Additiona #> 0x0D0  6C20636F 6D6D616E 64732073 686F756C  l commands shoul #> 0x0E0  64206265 0A3B2073 746F7265 64206F6E  d be.; stored on #> 0x0F0  20746865 20646973 6B20696E 20746865   the disk in the #> 0x100  20535953 3A432064 69726563 746F7279   SYS:C directory #> 0x110  2E0A3B20 466F7220 64656D6F 6E737472  ..; For demonstr #> 0x120  6174696F 6E207075 72706F73 65732077  ation purposes w #> 0x130  65206F6E 6C792065 63686F20 736F6D65  e only echo some #> 0x140  0A3B2074 65787420 746F2074 68652073  .; text to the s #> 0x150  63726565 6E2E2E2E 204E6F74 65207468  creen... Note th #> 0x160  61742074 68697320 77696C6C 206E6F74  at this will not #> 0x170  0A3B2077 6F726B20 6F6E2041 6D696761  .; work on Amiga #> 0x180  204F5320 3C322E30 20617320 22456368   OS <2.0 as .Ech #> 0x190  6F222069 73206E6F 74206176 61696C61  o. is not availa #> 0x1A0  626C650A 3B20696E 206F6C64 65722052  ble.; in older R #> 0x1B0  4F4D206B 69636B73 74617274 20766572  OM kickstart ver #> 0x1C0  73696F6E 732E0A0A 4563686F 20221B63  sions...Echo ..c #> 0x1D0  1B5B3232 6D1B5B33 326D4144 46204578  .[22m.[32mADF Ex #> 0x1E0  706C6F72 65722045 78616D70 6C652044  plorer Example D #> 0x1F0  69736B22 203B204E 6F746520 74686174  isk. ; Note that  empty_block <- new_adf_block() empty_block <- as_adf_block(raw(512L))  ## Write some random data to block 5 on the device ## Note that this could break the file system on the virtual device! write_adf_block(my_device, 5, as.raw(runif(512, 0, 255))) ## converting the data to an adf block object first ## is optional: write_adf_block(my_device, 6, as_adf_block(as.raw(runif(512, 0, 255)))) close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Changing and creating directories on a virtual device — adf_directory","title":"Changing and creating directories on a virtual device — adf_directory","text":"adf_directory() shows current directory virtual device, file system present. connecting creating new device, current directory disk's root default. change current directory, use adf_directory() combination assign operator (<-).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changing and creating directories on a virtual device — adf_directory","text":"","code":"adf_directory(dev, ...)  # S3 method for class 'adf_device' adf_directory(dev, ...)  adf_directory(dev, ...) <- value  # S3 method for class 'adf_device' adf_directory(dev, ...) <- value  # S3 method for class 'adf_device.character' adf_directory(dev, ...) <- value  # S3 method for class 'adf_device.virtual_path' adf_directory(dev, ...) <- value  make_adf_dir(x, path, ...)  # S3 method for class 'adf_device' make_adf_dir(x, path, ...)  # S3 method for class 'virtual_path' make_adf_dir(x, path, ...)  # S3 method for class 'character' make_adf_dir.adf_device(x, path, ...)  # S3 method for class 'virtual_path' make_adf_dir.adf_device(x, path, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changing and creating directories on a virtual device — adf_directory","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). ... Ignored value character string virtual_path (see virtual_path()) representing directory wish set current. x adf_device virtual_path class object. first specifies device directory needs created. latter specifies directory device needs created. path character string virtual_path (see virtual_path()) specifying name new directory created. missing x class virtual_path","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changing and creating directories on a virtual device — adf_directory","text":"make_adf_dir() returns device connection. adf_directory() returns current directory virtual_path class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Changing and creating directories on a virtual device — adf_directory","text":"create new directory device use make_adf_dir() use full relative path name specify new directory name. See vignette(\"virtual_paths\") note file directory names Amiga.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Changing and creating directories on a virtual device — adf_directory","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changing and creating directories on a virtual device — adf_directory","text":"","code":"## Open virtual device to demonstrate methods my_device <- demo_adf(write_protected = FALSE)  ## Show the current directory adf_directory(my_device) #> ROOT                   adfExampleOFS  ## Create a new directory make_adf_dir(my_device, \"DF0:s/newdir\") #> Bootable DOS Floppy DD #>   Volume 0 [---]: adfExampleOFS (2.2%)  ## Change the current dir to the new directory: adf_directory(my_device) <- \"DF0:s/newdir\"  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a connection to a file on a virtual ADF device — adf_file_con","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Open connection file virtual ADF device. created connection (valid) accepted R function reads writes connection, readLines(), writeLines(), readBin(), writeBin(), etc.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"","code":"adf_file_con(x, ..., writable = FALSE)  # S3 method for class 'adf_device' adf_file_con(x, path, ..., writable = FALSE)  # S3 method for class 'character' adf_file_con.adf_device(x, path, ..., writable = FALSE)  # S3 method for class 'virtual_path' adf_file_con(x, ..., writable = FALSE)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"x Either connection virtual ADF device created connect_adf(), virtual_path created virtual_path(). ... Ignored. writable logical value. TRUE connection can used write file virtual device. FALSE can used read. Note writeable connection can setup virtual device write protected. path required x virtual device class adf_device. case path character string representing path file virtual device. See also vignette(\"virtual_paths\").","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Returns R connection can handled function accepts connection reading writing. Remember call close() use.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/adf_file_con.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a connection to a file on a virtual ADF device — adf_file_con","text":"","code":"## First setup a connection to a virtual device adz_file <- system.file(\"example.adz\", package = \"adfExplorer\") my_device <- connect_adf(adz_file)  ## Open a connection to a file on the virtual device fcon <- adf_file_con(my_device, \"DF0:s/startup-sequence\")  ## Read from the file my_startup <- readLines(fcon, warn = FALSE)  ## Close the file close(fcon)  ## Close the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/close_all_devices.html","id":null,"dir":"Reference","previous_headings":"","what":"Close all virtual devices — close_all_devices","title":"Close all virtual devices — close_all_devices","text":"Close virtual devices currently open. function useful multiple devices opened time.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/close_all_devices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close all virtual devices — close_all_devices","text":"","code":"close_all_devices()"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/close_all_devices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close all virtual devices — close_all_devices","text":"Returns NULL invisibly.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress ADF to ADZ files and vice versa — compress_adf","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"ADZ format essentially compressed (gzip) version Amiga Disk File (ADF) format. adfExplorer allows connect formats. However, can open 'read-' connection ADZ files. Use compression decompression functions documented move back forth ADF ADZ formats.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"","code":"compress_adf(source, destination)  decompress_adz(source, destination)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"source Path source file read. destination Path destination file write.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"Returns NULL invisibly.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/compress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compress ADF to ADZ files and vice versa — compress_adf","text":"","code":"adz_file  <- system.file(\"example.adz\", package = \"adfExplorer\") adf_file  <- tempfile(fileext = \".adf\") adz_file2 <- tempfile(fileext = \".adz\")  decompress_adz(adz_file, adf_file) compress_adf(adf_file, adz_file2)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a connection to a virtual disk — connect_adf","title":"Create a connection to a virtual disk — connect_adf","text":"Establish connection virtual disk stored Amiga Disk Files (ADF). write read directly connection. Instead, use methods provided package retrieve information virtual disk create connections files disk, can write read (see adf_file_con()). Like connection, please use close() close connection use.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a connection to a virtual disk — connect_adf","text":"","code":"connect_adf(filename, write_protected = TRUE)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a connection to a virtual disk — connect_adf","text":"filename Filename ADF ADZ file containing virtual disk write_protected logical value indicating whether virtual disk needs write protected. TRUE, can open 'read ' connections write disk.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a connection to a virtual disk — connect_adf","text":"Returns R connection class adf_device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a connection to a virtual disk — connect_adf","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/connect_adf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a connection to a virtual disk — connect_adf","text":"","code":"adz_file <- system.file(\"example.adz\", package = \"adfExplorer\") my_device <- connect_adf(adz_file)  device_capacity(my_device) #> [1] 901120 close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and format a virtual ADF device — create_adf_device","title":"Create and format a virtual ADF device — create_adf_device","text":"functions help create empty virtual device can used Commodore Amiga emulation. create_adf_device() simply creates file proper size (file size represents device capacity) fills raw zeros. order use device Amiga operating system, file system needs installed device. can achieved prepare_adf_device(). Note file system also consume disk space virtual device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and format a virtual ADF device — create_adf_device","text":"","code":"create_adf_device(destination, type = \"DD\", ..., connect = TRUE)  prepare_adf_device(   dev,   name = \"EMPTY\",   ffs = TRUE,   international = TRUE,   dircache = FALSE,   bootable = TRUE,   ... )  # S3 method for class 'adf_device' prepare_adf_device(   dev,   name = \"EMPTY\",   ffs = TRUE,   international = TRUE,   dircache = FALSE,   bootable = TRUE,   ... )"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and format a virtual ADF device — create_adf_device","text":"destination File path virtual device needs stored. type Specify type virtual device wish create. one \"DD\" (double density floppy disk) \"HD\" (high density floppy disk). ... Ignored prepare_adf_device(). connect logical value. set TRUE connection opened newly created virtual device returned adf_device class object. set FALSE, file just created connection opened. latter case NULL returned invisibly. dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). name character string specifying disk name volume virtual device. truncated automatically long. ffs logical value indicating file system used. TRUE 'Fast File System' (FFS) used, FALSE, 'Old File System' used. See also vignette(\"file_system_modes\"). international logical value indicating whether international mode used file naming. See also vignette(\"file_system_modes\"). dircache logical value indicating whether directory caching used. See also vignette(\"file_system_modes\"). bootable logical value indicating whether want include executable code boot block. set TRUE minimal code added boot block. Amiga emulator, code load Amiga Disk Operating System library start Amiga Command line interface (CLI). run startup sequence file disk (available). set FALSE code added. case file system still accessible Amiga operating system (file system mode compatible). just use disk start (virtual) Amiga machine.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create and format a virtual ADF device — create_adf_device","text":"Either adf_device connection NULL depending value connect.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create and format a virtual ADF device — create_adf_device","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/create_adf_device.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create and format a virtual ADF device — create_adf_device","text":"","code":"## Filepath to store the virtual device: dest <- tempfile(fileext = \".adf\")  ## Create a blank unformated virtual device (a double density floppy disk): my_device <- create_adf_device(dest, \"DD\", connect = TRUE, write_protected = FALSE)  print(my_device) #> Non-bootable unformatted Floppy DD  ## Format the floppy and create a file system on the device: prepare_adf_device(my_device, name = \"foobar\") #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: foobar (0.2%)  print(my_device) #> Bootable DOS Floppy DD #>   Volume 0 [fi-]: foobar (0.2%)  ## don't forget to close the device connection after use: close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/demo_adf.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect with a demonstration ADF file — demo_adf","title":"Connect with a demonstration ADF file — demo_adf","text":"Opens connection virtual device demonstration purposes used examples.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/demo_adf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect with a demonstration ADF file — demo_adf","text":"","code":"demo_adf(write_protected = TRUE)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/demo_adf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect with a demonstration ADF file — demo_adf","text":"write_protected logical value. TRUE can read virtual device. FALSE demonstration disk copied tempdir() can write .","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/demo_adf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect with a demonstration ADF file — demo_adf","text":"Returns connection virtual device class adf_device","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — amigaDateToRaw","title":"Deprecated functions — amigaDateToRaw","text":"Functions documented deprecated removed future versions package. Please use new functions indicated instead revert old releases alternative available. See also vignette(\"version2\") information.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — amigaDateToRaw","text":"","code":"amigaDateToRaw(...)  amigaIntToRaw(...)  bitmapToRaw(...)  displayRawData(...)  rawToAmigaDate(...)  rawToAmigaInt(...)  rawToBitmap(...)  adf.disk.name(...) <- value  adf.file.mode(...) <- value  adf.file.time(...) <- value  amigaBlock(...) <- value  current.adf.dir(...) <- value  adf.disk.name(...)  adf.file.exists(...)  adf.file.info(...)  adf.file.mode(...)  adf.file.remove(...)  adf.file.size(...)  adf.file.time(...)  amigaBlock(...)  blank.amigaDOSDisk(...)  current.adf.dir(...)  dir.create.adf(...)  dir.exists.adf(...)  get.blockID(...)  get.diskLocation(...)  is.amigaDOS(...)  is.bootable(...)  list.adf.files(...)  put.adf.file(...)  read.adf(...)  read.adz(...)  write.adf(...)  write.adz(...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — amigaDateToRaw","text":"... Ignored. value Ignored.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions — amigaDateToRaw","text":"NULL","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain information about an adf_device connection — device_type","title":"Obtain information about an adf_device connection — device_type","text":"collection functions retrieve information virtual device, volume (file system) available device. See examples usage results.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain information about an adf_device connection — device_type","text":"","code":"device_type(dev, ...)  # S3 method for class 'adf_device' device_type(dev, ...)  device_capacity(dev, ...)  # S3 method for class 'adf_device' device_capacity(dev, ...)  volume_capacity(dev, ...)  # S3 method for class 'adf_device' volume_capacity(dev, vol = 0L, ...)  volume_name(dev, ...)  volume_name(dev, ...) <- value  # S3 method for class 'adf_device' volume_name(dev, vol = 0L, ...)  # S3 method for class 'adf_device' volume_name(dev, vol = 0L, ...) <- value  n_volumes(dev, ...)  # S3 method for class 'adf_device' n_volumes(dev, ...)  bytes_free(dev, ...)  # S3 method for class 'adf_device' bytes_free(dev, vol = 0L, ...)  is_bootable(dev, ...)  # S3 method for class 'adf_device' is_bootable(dev, vol = 0L, ...)  is_fast_file_system(dev, ...)  # S3 method for class 'adf_device' is_fast_file_system(dev, vol = 0L, ...)  is_international(dev, ...)  # S3 method for class 'adf_device' is_international(dev, vol = 0L, ...)  is_dircache(dev, ...)  # S3 method for class 'adf_device' is_dircache(dev, vol = 0L, ...)  is_write_protected(dev, ...)  # S3 method for class 'adf_device' is_write_protected(dev, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain information about an adf_device connection — device_type","text":"dev virtual adf device information needs obtained. class adf_device can created create_adf_device() connect_adf(). ... Ignored vol Volume index number device starting 0. Default 0. Note floppy disks can 1 volume installed. value Replacement value. case volume_name() can used assign new name volume.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain information about an adf_device connection — device_type","text":"Returns requested information, updated copy dev case assign operation (<-).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain information about an adf_device connection — device_type","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/device_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain information about an adf_device connection — device_type","text":"","code":"## Open virtual device to demonstrate methods my_device <- demo_adf(write_protected = FALSE)  device_type(my_device) #> [1] \"Floppy DD\"  device_capacity(my_device) # in bytes #> [1] 901120  volume_capacity(my_device) # in bytes #> [1] 901120  n_volumes(my_device) # number of volumes available on device #> [1] 1  volume_name(my_device) # name of the volume #> [1] \"adfExampleOFS\"  volume_name(my_device) <- \"new_name\" # rename the volume  bytes_free(my_device) # bytes available for writing #> [1] 882176  is_bootable(my_device) # tests if device is potentially bootable #> [1] TRUE  is_fast_file_system(my_device) # tests if volume uses FFS #> [1] FALSE  is_international(my_device) # tests if file system uses intl mode #> [1] FALSE  is_dircache(my_device) # tests if file system uses dir caching #> [1] FALSE  is_write_protected(my_device) # tests if device is protected against writing #> [1] FALSE  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"Retrieve information entry (file directory) headers virtual ADF devices. Get information like entry name, modification date, file size etc.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"","code":"adf_entry_info(x, path, ...)  # S3 method for class 'adf_device' adf_entry_info(x, path, ...)  # S3 method for class 'virtual_path' adf_entry_info.adf_device(x, path, ...)  # S3 method for class 'character' adf_entry_info.adf_device(x, path, ...)  # S3 method for class 'virtual_path' adf_entry_info(x, path, ...)  # S3 method for class 'adf_file_con' adf_entry_info(x, path, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"x Either virtual device virtual path. path virtual_path() pointing targeted entry (file directory). omitted x already virtual path. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"Returns list named lists entry properties. Elements included named list depend type entry (root, directory file).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/entry_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information from entry headers on virtual ADF devices — adf_entry_info","text":"","code":"## First setup a connection to a virtual device my_device <- demo_adf()  adf_entry_info(my_device, \"DF0:\") #> [[1]] #> [[1]]$type #> [1] \"HEADER\" #>  #> [[1]]$headerKey #> [1] 0 #>  #> [[1]]$highSeq #> [1] 0 #>  #> [[1]]$firstData #> [1] 0 #>  #> [[1]]$checkSum #> [1] -161088455 #>  #> [[1]]$hashTable #>  [1]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [20]   0   0   0 883   0 882   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [39]   0   0   0   0   0   0   0   0   0   0 885   0   0 884   0   0   0   0   0 #> [58]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>  #> [[1]]$bitmapFlag #> [1] TRUE #>  #> [[1]]$bmPages #>  [1] 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [20]   0   0   0   0   0   0 #>  #> [[1]]$bmExt #> [1] 0 #>  #> [[1]]$creation #> [1] \"2017-10-17 10:37:36 UTC\" #>  #> [[1]]$diskName #> [1] \"adfExampleOFS\" #>  #> [[1]]$access #> [1] \"2017-10-17 11:33:35 UTC\" #>  #> [[1]]$creation_o #> [1] \"2017-10-17 07:32:40 UTC\" #>  #> [[1]]$nextSameHash #> [1] 0 #>  #> [[1]]$parent #> [1] 0 #>  #> [[1]]$extension #> [1] 0 #>  #> [[1]]$secType #> [1] \"ROOT\" #>  #>  adf_entry_info(my_device, \"s\") #> [[1]] #> [[1]]$type #> [1] \"HEADER\" #>  #> [[1]]$sector #> [1] 882 #>  #> [[1]]$highSeq #> [1] 0 #>  #> [[1]]$checkSum #> [1] -22236329 #>  #> [[1]]$hashTable #>  [1]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [20]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [39]   0   0   0   0   0   0   0   0   0   0   0 915   0   0   0   0   0   0   0 #> [58]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #>  #> [[1]]$access #>     D     E     W     R     A     P     S     H  #> FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  #>  #> [[1]]$comment #> [1] \"\" #>  #> [[1]]$modified #> [1] \"2017-10-17 11:33:34 UTC\" #>  #> [[1]]$dirname #> [1] \"S\" #>  #> [[1]]$real #> [1] 0 #>  #> [[1]]$nextLink #> [1] 0 #>  #> [[1]]$nextSameHash #> [1] 0 #>  #> [[1]]$parent #> [1] 880 #>  #> [[1]]$extension #> [1] 0 #>  #> [[1]]$secType #> [1] \"DIR\" #>  #>  adf_entry_info(my_device, \"s/startup-sequence\") #> [[1]] #> [[1]]$type #> [1] \"HEADER\" #>  #> [[1]]$headerKey #> [1] 915 #>  #> [[1]]$highSeq #> [1] 2 #>  #> [[1]]$dataSize #> [1] 0 #>  #> [[1]]$firstData #> [1] 916 #>  #> [[1]]$checkSum #> [1] 1967975386 #>  #> [[1]]$dataBlocks #>  [1]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [20]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [39]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [58]   0   0   0   0   0   0   0   0   0   0   0   0   0 917 916 #>  #> [[1]]$access #>     D     E     W     R     A     P     S     H  #> FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  #>  #> [[1]]$byteSize #> [1] 664 #>  #> [[1]]$comment #> [1] \"\" #>  #> [[1]]$modified #> [1] \"2017-10-17 11:33:34 UTC\" #>  #> [[1]]$filename #> [1] \"Startup-Sequence\" #>  #> [[1]]$real #> [1] 0 #>  #> [[1]]$nextLink #> [1] 0 #>  #> [[1]]$nextSameHash #> [1] 0 #>  #> [[1]]$parent #> [1] 882 #>  #> [[1]]$extension #> [1] 0 #>  #> [[1]]$secType #> [1] \"FILE\" #>  #>   close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an entry exists on a virtual device — adf_file_exists","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"Test entry (file directory) exists virtual ADF device. adf_file_exists() equivalent file.exists() virtual ADF device. adf_dir_exists() equivalent dir.exists() virtual ADF device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"","code":"adf_file_exists(x, path, ...)  # S3 method for class 'adf_device' adf_file_exists(x, path, ...)  # S3 method for class 'virtual_path' adf_file_exists(x, path, ...)  adf_dir_exists(x, path, ...)  # S3 method for class 'adf_device' adf_dir_exists(x, path, ...)  # S3 method for class 'virtual_path' adf_dir_exists(x, path, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"x Either virtual device virtual path. path virtual_path() pointing targeted entry (file directory). omitted x already virtual path. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"adf_file_exists() returns TRUE path exists virtual device, FALSE otherwise. adf_dir_exists() returns TRUE path exists directory, FALSE otherwise.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an entry exists on a virtual device — adf_file_exists","text":"","code":"## First setup a connection to a virtual device my_device <- demo_adf()  adf_file_exists(my_device, \"s/startup-sequence\") #> [1] TRUE adf_dir_exists(my_device, \"s/startup-sequence\") #> [1] FALSE  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"List entries in a directory of a virtual ADF device — list_adf_entries","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"Get overview entries (files directories) specific directory.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"","code":"list_adf_entries(x, path, recursive = FALSE, nested = FALSE, ...)  # S3 method for class 'adf_device' list_adf_entries(x, path, recursive = FALSE, nested = FALSE, ...)  # S3 method for class 'virtual_path' list_adf_entries(x, path, recursive = FALSE, nested = FALSE, ...)  # S3 method for class 'character' list_adf_entries.adf_device(x, path, recursive = FALSE, nested = FALSE, ...)  # S3 method for class 'virtual_path' list_adf_entries.adf_device(x, path, recursive = FALSE, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"x Either adf_device class object, case virtual_path argument needs specified; , virtual_path class object. path virtual path wish obtain list entries (see also vignette(\"virtual_paths\")). missing, entries current directory (adf_directory()) returned, wen x adf_device class object. x virtual_path class object, content path defined object listed recursive logical value. set TRUE, function called recursively subdirectories path. nested logical value. set directory tree returned nested list. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"vector virtual_path class objects, nested list case nested TRUE.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/list_adf_entries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List entries in a directory of a virtual ADF device — list_adf_entries","text":"","code":"## First setup a connection to a virtual device my_device <- demo_adf()  ## List all entries in the disk's root: list_adf_entries(my_device) #> DIR  DEWR...     Devs #> DIR  DEWR...        S #> DIR  DEWR...     this #> DIR  DEWR...     mods  ## List all entries on the disk as a vector of `virtual paths`: list_adf_entries(my_device, recursive = TRUE) #> DIR  DEWR...     Devs #> FILE DEWR...iguration #> DIR  DEWR...        S #> FILE DEWR...-Sequence #> DIR  DEWR...     this #> DIR  DEWR...       is #> DIR  DEWR...        a #> DIR  DEWR...     deep #> DIR  DEWR...     path #> DIR  DEWR...     mods #> FILE DEWR...mod.intro  ##  List all entries on the disk as a nested list: list_adf_entries(my_device, recursive = TRUE, nested = TRUE) #> $Devs #> $Devs$`system-configuration` #> NULL #>  #>  #> $S #> $S$`Startup-Sequence` #> NULL #>  #>  #> $this #> $this$is #> $this$is$a #> $this$is$a$deep #> $this$is$a$deep$path #> list() #>  #>  #>  #>  #>  #> $mods #> $mods$mod.intro #> NULL #>  #>   close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/move.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy or move files between physical and virtual devices — copy_adf_entry","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"functions can copy move entries (files directories) physical virtual ADF device. copy_adf_entry() files duplicated, move_adf_entry() files moved (deleted source).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"","code":"copy_adf_entry(source, destination, ...)  # S3 method for class 'character' copy_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry.character(source, destination, ...)  # S3 method for class 'virtual_path' copy_adf_entry.virtual_path(source, destination, ...)  # S3 method for class 'character' copy_adf_entry.virtual_path(source, destination, ...)  move_adf_entry(source, destination, ...)  # S3 method for class 'character' move_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry.character(source, destination, ...)  # S3 method for class 'virtual_path' move_adf_entry.virtual_path(source, destination, ...)  # S3 method for class 'character' move_adf_entry.virtual_path(source, destination, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"source, destination source path file directory needs moved copied. destination path directory source needs copied moved. source destination character string, assumed path file directory physical device. can use virtual_path() either source destination . source destination character string. copying moving files physical device base function file.copy(). ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/move.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/move.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy or move files between physical and virtual devices — copy_adf_entry","text":"","code":"## Create an Amiga Disk File ## and prepare a file system on the virtual device my_device <-   create_adf_device(     tempfile(fileext = \".adf\"),     write_protected = FALSE) |>   prepare_adf_device()  ## Copy the packaged R scripts of this package to the virtual device copy_adf_entry(   system.file(\"R\", package = \"adfExplorer\"),   virtual_path(my_device, \"DF0:\") )  ## List all entries on the virtual device list_adf_entries(my_device, recursive = TRUE) #> DIR  DEWR...        R #> FILE DEWR...lorer.rdb #> FILE DEWR...fExplorer #> FILE DEWR...lorer.rdx  ## Move the entire virtual device content to ## the tempdir on your physical device dest <- file.path(tempdir(), \"DF0\") dir.create(dest) move_adf_entry(   virtual_path(my_device, \"DF0:\"),   dest )  ## cleanup the temp directory unlink(dest, recursive = TRUE)  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"Get name entry (root, file directory) update assign operator (<-).","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"","code":"adf_entry_name(x, path, ...) <- value  adf_entry_name(x, path, ...)  # S3 method for class 'adf_file_con' adf_entry_name(x, path, ...) <- value  # S3 method for class 'adf_device' adf_entry_name(x, path, ...) <- value  # S3 method for class 'virtual_path' adf_entry_name(x, path, ...) <- value  # S3 method for class 'adf_device.character' adf_entry_name(x, path, ...) <- value  # S3 method for class 'adf_device.virtual_path' adf_entry_name(x, path, ...) <- value"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"x Either virtual device virtual path. path virtual_path() pointing targeted entry (file directory). omitted x already virtual path. ... Ignored value New name entry. name sanitised truncated assigned entry.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"Returns entry name requested path case assign operation (<-) updated version x.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain or modify an entry name on a virtual device — adf_entry_name<-","text":"","code":"## Open virtual device to demonstrate methods my_device <- demo_adf(write_protected = FALSE)  ## rename a specific entry adf_entry_name(my_device, \"DF0:mods/mod.intro\") <- \"mod.music\"  ## rename disk (also possible with `volume_name<-()`) adf_entry_name(my_device, \"DF0:\") <- \"my_disk\"  close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer binary data to and from connections — readBin","title":"Transfer binary data to and from connections — readBin","text":"methods mask identical functions base package (see base::readBin(), base::readLines(), base::readChar(), base::writeBin(), base::writeLines() base::writeChar(). behave exactly base counterpart, exception can read write connections opened adf_file_con().","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer binary data to and from connections — readBin","text":"","code":"readBin(   con,   what,   n = 1L,   size = NA_integer_,   signed = TRUE,   endian = .Platform$endian )  # Default S3 method readBin(   con,   what,   n = 1L,   size = NA_integer_,   signed = TRUE,   endian = .Platform$endian )  # S3 method for class 'adf_file_con' readBin(   con,   what,   n = 1L,   size = NA_integer_,   signed = TRUE,   endian = .Platform$endian )  readLines(   con,   n = -1L,   ok = TRUE,   warn = TRUE,   encoding = \"unknown\",   skipNul = FALSE )  # Default S3 method readLines(   con = stdin(),   n = -1L,   ok = TRUE,   warn = TRUE,   encoding = \"unknown\",   skipNul = FALSE )  # S3 method for class 'adf_file_con' readLines(   con,   n = -1L,   ok = TRUE,   warn = TRUE,   encoding = \"unknown\",   skipNul = FALSE )  writeBin(   object,   con,   size = NA_integer_,   endian = .Platform$endian,   useBytes = FALSE )  # Default S3 method writeBin(   object,   con,   size = NA_integer_,   endian = .Platform$endian,   useBytes = FALSE )  # S3 method for class 'adf_file_con' writeBin(   object,   con,   size = NA_integer_,   endian = .Platform$endian,   useBytes = FALSE )  writeLines(text, con, sep = \"\\n\", useBytes = FALSE)  # Default S3 method writeLines(text, con = stdout(), sep = \"\\n\", useBytes = FALSE)  # S3 method for class 'adf_file_con' writeLines(text, con = stdout(), sep = \"\\n\", useBytes = FALSE)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer binary data to and from connections — readBin","text":"con connection file virtual ADF device. connection can established adf_file_con(). Either object whose mode give mode     vector read, character vector length one describing     mode: one \"numeric\", \"double\",     \"integer\", \"int\", \"logical\", \"complex\",     \"character\", \"raw\". n numeric.  (maximal) number records     read.  can use -estimate , large     storage reserved n items. size integer.  number bytes per element byte     stream.  default, NA_integer_, uses natural size.     Size changing supported raw complex vectors. signed logical.  used integers sizes 1 2,     determines quantity file     regarded signed unsigned integer. endian endian-ness (\"big\" \"little\")     target system file.  Using \"swap\" force swapping     endian-ness. ok logical.  OK reach end connection     n > 0 lines read?  , error generated. warn logical.  Warn text file missing final EOL     embedded nuls file. encoding encoding assumed input strings.      used mark character strings known     Latin-1, UTF-8 bytes: used re-encode input.         latter, specify encoding part connection con     via options(encoding=): see examples     ‘Details’. skipNul logical: nuls skipped? object R object written connection. useBytes See writeLines. text character vector sep character string.  string written connection     line text.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/read_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer binary data to and from connections — readBin","text":"Returns NULL invisibly","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"function removes entry (file directory) virtual ADF device. moment function removes single entry per call, case entry directory, directory needs empty can removed.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"","code":"remove_adf_entry(x, path, flush = FALSE, ...)  # S3 method for class 'adf_device' remove_adf_entry(x, path, flush = FALSE, ...)  # S3 method for class 'virtual_path' remove_adf_entry(x, path, flush = FALSE, ...)  # S3 method for class 'character' remove_adf_entry.adf_device(x, path, flush = FALSE, ...)  # S3 method for class 'virtual_path' remove_adf_entry.adf_device(x, path, flush = FALSE, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"x virtual ADF device entry needs deleted virtual path pointing entry deleted. case virtual device, class adf_device can created create_adf_device() connect_adf(). case virtual path use virtual_path(). path character string virtual_path (see virtual_path()) representing file directory wish delete. omitted x already virtual path. flush logical value. set FALSE (default), entry's registry parent directory removed flags bitmap block set 'available'. entry's header data entry file, file data still linger virtual disk. want , set argument TRUE, case file directory data purged. Note latter case, possible recover deleted file directory. ... Ignored","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"Returns device connection","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/remove_adf_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove entry (file / directory) from a virtual ADF device — remove_adf_entry","text":"","code":"# Open a connection to a virtual device: my_device <- demo_adf(write_protected = FALSE)  ## List files in directory 'Devs': list_adf_entries(my_device, \"Devs\") #> FILE DEWR----   0.2 kB system-configuration  ## remove the file 'system-configuration' from the virtual device remove_adf_entry(my_device, \"devs/system-configuration\") #> Bootable DOS Floppy DD #>   Volume 0 [---]: adfExampleOFS (2.0%)  ## List files in directory 'Devs' again: list_adf_entries(my_device, \"Devs\") #> :EMPTY:  ## close the connection to the virtual device close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/s3_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic methods for S3 class objects — format.adf_device","title":"Basic methods for S3 class objects — format.adf_device","text":"Format print methods S3 class objects created adfExplorer","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/s3_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic methods for S3 class objects — format.adf_device","text":"","code":"# S3 method for class 'adf_device' format(x, ...)  # S3 method for class 'adf_file_con' format(x, ...)  # S3 method for class 'adf_block' format(x, ...)  # S3 method for class 'virtual_path' format(x, width = 20L, ...)  # S3 method for class 'adf_device' print(x, ...)  # S3 method for class 'adf_file_con' print(x, ...)  # S3 method for class 'adf_block' print(x, ...)  # S3 method for class 'virtual_path' print(x, ...)  # S3 method for class 'virtual_path' as.character(x, ...)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/s3_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic methods for S3 class objects — format.adf_device","text":"x Object formatted printed ... Ignored passed next methods width Set text width formatting virtual paths","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/s3_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic methods for S3 class objects — format.adf_device","text":"","code":"my_device <- demo_adf() vp        <- list_adf_entries(my_device, recursive = TRUE) con       <- adf_file_con(my_device, \"s/startup-sequence\") block     <- read_adf_block(my_device, 0L)  format(my_device) #> [1] \"Bootable write protected DOS Floppy DD\\n  Volume 0 [---]: adfExampleOFS (2.1%)\" format(vp) #>  [1] \"DIR  DEWR...     Devs\" \"FILE DEWR...iguration\" \"DIR  DEWR...        S\" #>  [4] \"FILE DEWR...-Sequence\" \"DIR  DEWR...     this\" \"DIR  DEWR...       is\" #>  [7] \"DIR  DEWR...        a\" \"DIR  DEWR...     deep\" \"DIR  DEWR...     path\" #> [10] \"DIR  DEWR...     mods\" \"FILE DEWR...mod.intro\" format(con) #> [1] \"A read only connection to virtual file:\\nadfExampleOFS:S/Startup-Sequence\" format(block)  print(my_device) #> Bootable write protected DOS Floppy DD #>   Volume 0 [---]: adfExampleOFS (2.1%) print(vp) #> DIR  DEWR...     Devs #> FILE DEWR...iguration #> DIR  DEWR...        S #> FILE DEWR...-Sequence #> DIR  DEWR...     this #> DIR  DEWR...       is #> DIR  DEWR...        a #> DIR  DEWR...     deep #> DIR  DEWR...     path #> DIR  DEWR...     mods #> FILE DEWR...mod.intro print(con) #> A read only connection to virtual file: #> adfExampleOFS:S/Startup-Sequence print(block) #> 0x000  444F5300 E33D0E73 00000370 43FA003E  DOS.ã=.s...pCú.> #> 0x010  70254EAE FDD84A80 670C2240 08E90006  p.N®ýØJg..@.é.. #> 0x020  00224EAE FE6243FA 00184EAE FFA04A80  ..N®þbCú..N®ÿ J #> 0x030  670A2040 20680016 70004E75 70FF4E75  g. @ h..p.NupÿNu #> 0x040  646F732E 6C696272 61727900 65787061  dos.library.expa #> 0x050  6E73696F 6E2E6C69 62726172 79000000  nsion.library... #> 0x060  00000000 00000000 00000000 00000000  ................ #> 0x070  00000000 00000000 00000000 00000000  ................ #> 0x080  00000000 00000000 00000000 00000000  ................ #> 0x090  00000000 00000000 00000000 00000000  ................ #> 0x0A0  00000000 00000000 00000000 00000000  ................ #> 0x0B0  00000000 00000000 00000000 00000000  ................ #> 0x0C0  00000000 00000000 00000000 00000000  ................ #> 0x0D0  00000000 00000000 00000000 00000000  ................ #> 0x0E0  00000000 00000000 00000000 00000000  ................ #> 0x0F0  00000000 00000000 00000000 00000000  ................ #> 0x100  00000000 00000000 00000000 00000000  ................ #> 0x110  00000000 00000000 00000000 00000000  ................ #> 0x120  00000000 00000000 00000000 00000000  ................ #> 0x130  00000000 00000000 00000000 00000000  ................ #> 0x140  00000000 00000000 00000000 00000000  ................ #> 0x150  00000000 00000000 00000000 00000000  ................ #> 0x160  00000000 00000000 00000000 00000000  ................ #> 0x170  00000000 00000000 00000000 00000000  ................ #> 0x180  00000000 00000000 00000000 00000000  ................ #> 0x190  00000000 00000000 00000000 00000000  ................ #> 0x1A0  00000000 00000000 00000000 00000000  ................ #> 0x1B0  00000000 00000000 00000000 00000000  ................ #> 0x1C0  00000000 00000000 00000000 00000000  ................ #> 0x1D0  00000000 00000000 00000000 00000000  ................ #> 0x1E0  00000000 00000000 00000000 00000000  ................ #> 0x1F0  00000000 00000000 00000000 00000000  ................  close(con) close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":null,"dir":"Reference","previous_headings":"","what":"A path pointing to a file or directory on a virtual ADF device — virtual_path","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"function creates path pointing file directory virtual ADF device (created connect_adf() create_adf_device()). virtual path created function can used establish readable writable connection file, obtain information file directory. See also vignette(\"virtual_paths\")","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"","code":"virtual_path(dev, path)"},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"dev virtual ADF device (created connect_adf() create_adf_device()). Make sure file system present virtual device install first missing using prepare_adf_device(). path character string representing path file directory virtual device.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"Returns virtual_path class object.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/reference/virtual_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A path pointing to a file or directory on a virtual ADF device — virtual_path","text":"","code":"# Open a connection to a virtual device: my_device <- demo_adf()  # specify a virtual path: my_path <- virtual_path(my_device, \"DF0:s/startup-sequence\")  # close the virtual device: close(my_device)"},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-203","dir":"Changelog","previous_headings":"","what":"adfExplorer 2.0.3","title":"adfExplorer 2.0.3","text":"Plugged memory leaks fixed undefined behaviour Added demo_adf() Improved test coverage Fixed several minor bugs","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-200","dir":"Changelog","previous_headings":"","what":"adfExplorer 2.0.0","title":"adfExplorer 2.0.0","text":"CRAN release: 2024-12-23 Connect ADF ADZ files Create new virtual floppy disks (including file system) Connect files virtual floppy disks Move files virtual physical devices virtual device files directories virtual device List files directories virtual device Create directories virtual device Remove files directories virtual device Note complete overhaul, large set functions classes deprecated longer use","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v018","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.8","title":"adfExplorer v0.1.8","text":"CRAN release: 2024-03-06 added adf.file.info, adf.file.mode, adf.file.time adf.file.size methods. added dir.exists.adf improved adf.file.exists Corrections updates manual vignettes Added pkgdown website","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v016","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.6","title":"adfExplorer v0.1.6","text":"CRAN release: 2021-09-05 URL fix vignette pass CRAN checks","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v015","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.5","title":"adfExplorer v0.1.5","text":"Added ‘remove.adf.file’ method Updated manual vignette Minor correction manual","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v014","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.4","title":"adfExplorer v0.1.4","text":"CRAN release: 2018-03-05 Fix pass CRAN checks.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v013","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.3","title":"adfExplorer v0.1.3","text":"Minor corrections manual. Directories can now created virtual Amiga disk ‘dir.create.adf’ method. newly added method ‘put.adf.file’ now possible put file onto virtual Amiga disk. Functions ‘rawToBitmap’ ‘bitmapToRaw’ improved now exported documented.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v012","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.2","title":"adfExplorer v0.1.2","text":"CRAN release: 2017-11-03 Added adf.file.exists method. Modified ‘displayRawData’ convert special characters dots. Minor adjustments manual Vignette contained r-code output non-supported characters. quick fix display output now suppressed vignette.","code":""},{"path":"https://pepijn-devries.github.io/adfExplorer/news/index.html","id":"adfexplorer-v011","dir":"Changelog","previous_headings":"","what":"adfExplorer v0.1.1","title":"adfExplorer v0.1.1","text":"CRAN release: 2017-10-30 First release: Read write adf files Detect presence file system (Amiga OS 3.x earlier) List files within adf Retrieve files within adf files","code":""}]
